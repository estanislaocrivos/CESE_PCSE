
TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d34  08004d34  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000005c  08004d98  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004d98  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001209f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae1  00000000  00000000  0003216e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00034c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e45  00000000  00000000  00035e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018276  00000000  00000000  00036ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a42  00000000  00000000  0004ef43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091f29  00000000  00000000  00066985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005124  00000000  00000000  000f88b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fd9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b94 	.word	0x08004b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004b94 	.word	0x08004b94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM11)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d104      	bne.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    Timer_Count += 1;  // Incrementar la cuenta cada segundo
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000596:	6013      	str	r3, [r2, #0]
  }
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40014800 	.word	0x40014800
 80005a8:	20000104 	.word	0x20000104

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09a      	sub	sp, #104	; 0x68
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	Person People[MAX_PEOPLE];

	uint8_t ID_0[] = "880468ED09";
 80005b2:	4a45      	ldr	r2, [pc, #276]	; (80006c8 <main+0x11c>)
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ba:	c303      	stmia	r3!, {r0, r1}
 80005bc:	801a      	strh	r2, [r3, #0]
 80005be:	3302      	adds	r3, #2
 80005c0:	0c12      	lsrs	r2, r2, #16
 80005c2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ID_LENGTH; i++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	667b      	str	r3, [r7, #100]	; 0x64
 80005c8:	e00d      	b.n	80005e6 <main+0x3a>
	{
	  People[0].ID[i] = ID_0[i]; // Conversión explícita
 80005ca:	f107 0218 	add.w	r2, r7, #24
 80005ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005d0:	4413      	add	r3, r2
 80005d2:	7819      	ldrb	r1, [r3, #0]
 80005d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005da:	4413      	add	r3, r2
 80005dc:	460a      	mov	r2, r1
 80005de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ID_LENGTH; i++)
 80005e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005e2:	3301      	adds	r3, #1
 80005e4:	667b      	str	r3, [r7, #100]	; 0x64
 80005e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	ddee      	ble.n	80005ca <main+0x1e>
	}
	People[0].ID[ID_LENGTH] = '\0';
 80005ec:	2300      	movs	r3, #0
 80005ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	People[0].Registered = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	People[0].Time_Counter = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint8_t ID_1[] = "88044171BC";
 80005fe:	4a33      	ldr	r2, [pc, #204]	; (80006cc <main+0x120>)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	ca07      	ldmia	r2, {r0, r1, r2}
 8000606:	c303      	stmia	r3!, {r0, r1}
 8000608:	801a      	strh	r2, [r3, #0]
 800060a:	3302      	adds	r3, #2
 800060c:	0c12      	lsrs	r2, r2, #16
 800060e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ID_LENGTH; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	663b      	str	r3, [r7, #96]	; 0x60
 8000614:	e00d      	b.n	8000632 <main+0x86>
	{
	  People[1].ID[i] = ID_1[i]; // Conversión explícita
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800061c:	4413      	add	r3, r2
 800061e:	7819      	ldrb	r1, [r3, #0]
 8000620:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8000624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000626:	4413      	add	r3, r2
 8000628:	460a      	mov	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ID_LENGTH; i++)
 800062c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800062e:	3301      	adds	r3, #1
 8000630:	663b      	str	r3, [r7, #96]	; 0x60
 8000632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000634:	2b0f      	cmp	r3, #15
 8000636:	ddee      	ble.n	8000616 <main+0x6a>
	}
	People[1].ID[ID_LENGTH] = '\0';
 8000638:	2300      	movs	r3, #0
 800063a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	People[1].Registered = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	People[1].Time_Counter = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint8_t ID_2[] = "ABA6A92185";
 800064a:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <main+0x124>)
 800064c:	463b      	mov	r3, r7
 800064e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000650:	c303      	stmia	r3!, {r0, r1}
 8000652:	801a      	strh	r2, [r3, #0]
 8000654:	3302      	adds	r3, #2
 8000656:	0c12      	lsrs	r2, r2, #16
 8000658:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800065e:	e00c      	b.n	800067a <main+0xce>
	{
	  People[2].ID[i] = ID_2[i]; // Conversión explícita
 8000660:	463a      	mov	r2, r7
 8000662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000664:	4413      	add	r3, r2
 8000666:	7819      	ldrb	r1, [r3, #0]
 8000668:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800066c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800066e:	4413      	add	r3, r2
 8000670:	460a      	mov	r2, r1
 8000672:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000676:	3301      	adds	r3, #1
 8000678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800067a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800067c:	2b0f      	cmp	r3, #15
 800067e:	ddef      	ble.n	8000660 <main+0xb4>
	}
	People[2].ID[ID_LENGTH] = '\0';
 8000680:	2300      	movs	r3, #0
 8000682:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	People[2].Registered = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	People[2].Time_Counter = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f001 f969 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f81f 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f8d7 	bl	800084c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069e:	f000 f8ab 	bl	80007f8 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80006a2:	f000 f885 	bl	80007b0 <MX_TIM11_Init>

  /* USER CODE BEGIN 2 */

  /* Initialize all configured peripherals */
  I2C_Init();
 80006a6:	f000 fb2f 	bl	8000d08 <I2C_Init>
  SPI_Init();
 80006aa:	f000 fc5f 	bl	8000f6c <SPI_Init>
  HAL_TIM_Base_Start_IT(&htim11);
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <main+0x128>)
 80006b0:	f003 f8e4 	bl	800387c <HAL_TIM_Base_Start_IT>
  MFRC522_Init();
 80006b4:	f000 fffe 	bl	80016b4 <MFRC522_Init>
  LCD_Init ();
 80006b8:	f000 fb6e 	bl	8000d98 <LCD_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    MEF_Update(People);
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fd17 	bl	80010f4 <MEF_Update>
 80006c6:	e7f9      	b.n	80006bc <main+0x110>
 80006c8:	08004bac 	.word	0x08004bac
 80006cc:	08004bb8 	.word	0x08004bb8
 80006d0:	08004bc4 	.word	0x08004bc4
 80006d4:	20000078 	.word	0x20000078

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fdd0 	bl	800428c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <SystemClock_Config+0xd0>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemClock_Config+0xd0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd4>)
 8000726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800074c:	2310      	movs	r3, #16
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000750:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000756:	2304      	movs	r3, #4
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075a:	2307      	movs	r3, #7
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4618      	mov	r0, r3
 8000764:	f002 f8ac 	bl	80028c0 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076e:	f000 f8f5 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fb0e 	bl	8002db0 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079a:	f000 f8df 	bl	800095c <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_TIM11_Init+0x40>)
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_TIM11_Init+0x44>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 7999;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_TIM11_Init+0x40>)
 80007bc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007c0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_TIM11_Init+0x40>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_TIM11_Init+0x40>)
 80007ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80007ce:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_TIM11_Init+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_TIM11_Init+0x40>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_TIM11_Init+0x40>)
 80007de:	f002 fffd 	bl	80037dc <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80007e8:	f000 f8b8 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000078 	.word	0x20000078
 80007f4:	40014800 	.word	0x40014800

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <MX_USART2_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000830:	f003 fa4a 	bl	8003cc8 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f000 f88f 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000c0 	.word	0x200000c0
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b39      	ldr	r3, [pc, #228]	; (800094c <MX_GPIO_Init+0x100>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a38      	ldr	r2, [pc, #224]	; (800094c <MX_GPIO_Init+0x100>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b36      	ldr	r3, [pc, #216]	; (800094c <MX_GPIO_Init+0x100>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b32      	ldr	r3, [pc, #200]	; (800094c <MX_GPIO_Init+0x100>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a31      	ldr	r2, [pc, #196]	; (800094c <MX_GPIO_Init+0x100>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b2f      	ldr	r3, [pc, #188]	; (800094c <MX_GPIO_Init+0x100>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <MX_GPIO_Init+0x100>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2a      	ldr	r2, [pc, #168]	; (800094c <MX_GPIO_Init+0x100>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <MX_GPIO_Init+0x100>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <MX_GPIO_Init+0x100>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_GPIO_Init+0x100>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_GPIO_Init+0x100>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80008d8:	481d      	ldr	r0, [pc, #116]	; (8000950 <MX_GPIO_Init+0x104>)
 80008da:	f001 fb71 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f240 4111 	movw	r1, #1041	; 0x411
 80008e4:	481b      	ldr	r0, [pc, #108]	; (8000954 <MX_GPIO_Init+0x108>)
 80008e6:	f001 fb6b 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4815      	ldr	r0, [pc, #84]	; (8000958 <MX_GPIO_Init+0x10c>)
 8000902:	f001 f9d9 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000906:	f44f 7388 	mov.w	r3, #272	; 0x110
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0x104>)
 8000920:	f001 f9ca 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 8000924:	f240 4311 	movw	r3, #1041	; 0x411
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_GPIO_Init+0x108>)
 800093e:	f001 f9bb 	bl	8001cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000
 8000954:	40020400 	.word	0x40020400
 8000958:	40020800 	.word	0x40020800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009aa:	2007      	movs	r0, #7
 80009ac:	f001 f942 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <HAL_I2C_MspInit+0x84>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d12c      	bne.n	8000a38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <HAL_I2C_MspInit+0x8c>)
 8000a18:	f001 f94e 	bl	8001cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400

08000a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12b      	bne.n	8000ac6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aa6:	23e0      	movs	r3, #224	; 0xe0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_SPI_MspInit+0x8c>)
 8000ac2:	f001 f8f9 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40013000 	.word	0x40013000
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_TIM_Base_MspInit+0x48>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d115      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_TIM_Base_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_TIM_Base_MspInit+0x4c>)
 8000af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_TIM_Base_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	201a      	movs	r0, #26
 8000b10:	f001 f89b 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b14:	201a      	movs	r0, #26
 8000b16:	f001 f8b4 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40014800 	.word	0x40014800
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b86:	230c      	movs	r3, #12
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b96:	2307      	movs	r3, #7
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_MspInit+0x8c>)
 8000ba2:	f001 f889 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 ff00 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c16:	f002 fe93 	bl	8003940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000078 	.word	0x20000078

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f003 fb22 	bl	800429c <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20018000 	.word	0x20018000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	20000108 	.word	0x20000108
 8000c8c:	20000308 	.word	0x20000308

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cde:	f7ff ffd7 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f003 fae1 	bl	80042a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc61 	bl	80005ac <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cf8:	08004d3c 	.word	0x08004d3c
  ldr r2, =_sbss
 8000cfc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d00:	20000308 	.word	0x20000308

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <I2C_Init>:
  *
  * @param void
  * @retval uint8_t
  */
void I2C_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <I2C_Init+0x50>)
 8000d0e:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <I2C_Init+0x54>)
 8000d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <I2C_Init+0x50>)
 8000d14:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <I2C_Init+0x58>)
 8000d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <I2C_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <I2C_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <I2C_Init+0x50>)
 8000d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <I2C_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <I2C_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <I2C_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <I2C_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <I2C_Init+0x50>)
 8000d46:	f001 f96f 	bl	8002028 <HAL_I2C_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <I2C_Init+0x4c>
  {
    Error_Handler();
 8000d50:	f7ff fe04 	bl	800095c <Error_Handler>
  }
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000010c 	.word	0x2000010c
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	000186a0 	.word	0x000186a0

08000d64 <I2C_Transmit>:
  *
  * @param uint8_t *data, uint16_t size
  * @retval void
  */
void I2C_Transmit(uint8_t *data, uint16_t size)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
    if (HAL_I2C_Master_Transmit(&hi2c1, LCD_Module_Address, data, size, 100) != HAL_OK)
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	2264      	movs	r2, #100	; 0x64
 8000d74:	9200      	str	r2, [sp, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	214e      	movs	r1, #78	; 0x4e
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <I2C_Transmit+0x30>)
 8000d7c:	f001 fa98 	bl	80022b0 <HAL_I2C_Master_Transmit>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <I2C_Transmit+0x26>
    {
        Error_Handler();
 8000d86:	f7ff fde9 	bl	800095c <Error_Handler>
    }
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000010c 	.word	0x2000010c

08000d98 <LCD_Init>:
  *
  * @param void
  * @retval void
  */
void LCD_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000d9c:	2032      	movs	r0, #50	; 0x32
 8000d9e:	f000 fe55 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x30);
 8000da2:	2030      	movs	r0, #48	; 0x30
 8000da4:	f000 f838 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(10);
 8000da8:	200a      	movs	r0, #10
 8000daa:	f000 fe4f 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x30);
 8000dae:	2030      	movs	r0, #48	; 0x30
 8000db0:	f000 f832 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 fe49 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x30);
 8000dba:	2030      	movs	r0, #48	; 0x30
 8000dbc:	f000 f82c 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 fe43 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x20);
 8000dc6:	2020      	movs	r0, #32
 8000dc8:	f000 f826 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(50);
 8000dcc:	2032      	movs	r0, #50	; 0x32
 8000dce:	f000 fe3d 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x28);
 8000dd2:	2028      	movs	r0, #40	; 0x28
 8000dd4:	f000 f820 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fe37 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x08);
 8000dde:	2008      	movs	r0, #8
 8000de0:	f000 f81a 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f000 fe31 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x01);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 f814 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 fe2b 	bl	8001a4c <HAL_Delay>
	HAL_Delay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 fe28 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x06);
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	f000 f80b 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 fe22 	bl	8001a4c <HAL_Delay>
	LCD_Send_Cmd(0x0C);
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f000 f805 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(50);
 8000e0e:	2032      	movs	r0, #50	; 0x32
 8000e10:	f000 fe1c 	bl	8001a4c <HAL_Delay>
	
	return;
 8000e14:	bf00      	nop
}
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <LCD_Send_Cmd>:
  *
  * @param command
  * @retval void
  */
void LCD_Send_Cmd(uint8_t command)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	// Funcion para enviarle un comando al display (ver comandos en hoja de datos)
	
	// Separo el byte en parte alta y parte baja:
	uint8_t DATO_HIGH =  (command & 0xF0);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f023 030f 	bic.w	r3, r3, #15
 8000e28:	73fb      	strb	r3, [r7, #15]
	uint8_t DATO_LOW = (command<<4 & 0xF0);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	73bb      	strb	r3, [r7, #14]
	
	// Array para almacenar el byte en 2 envios de 4 bits (y 2 envios para senales RS EN)
	uint8_t Data[4]; 

	Data[0] = DATO_HIGH | 0X0C; // EN = 1 RS = 0
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	f043 030c 	orr.w	r3, r3, #12
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	723b      	strb	r3, [r7, #8]
	Data[1] = DATO_HIGH | 0X08;	// EN = 0 RS = 0
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	727b      	strb	r3, [r7, #9]
	Data[2] = DATO_LOW  | 0X0C; // EN = 1 RS = 0
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	f043 030c 	orr.w	r3, r3, #12
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	72bb      	strb	r3, [r7, #10]
	Data[3] = DATO_LOW  | 0X08; // EN = 0 RS = 0
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	72fb      	strb	r3, [r7, #11]

	I2C_Transmit(Data, 4);
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff80 	bl	8000d64 <I2C_Transmit>
	HAL_Delay(5);
 8000e64:	2005      	movs	r0, #5
 8000e66:	f000 fdf1 	bl	8001a4c <HAL_Delay>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <LCD_Send_Char>:
  *
  * @param uint8_t character
  * @retval void
  */
void LCD_Send_Char(uint8_t character)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
	uint8_t DATO_HIGH =  (character & 0xF0);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f023 030f 	bic.w	r3, r3, #15
 8000e82:	73fb      	strb	r3, [r7, #15]
	uint8_t DATO_LOW = (character<<4 & 0xF0);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	73bb      	strb	r3, [r7, #14]
	
	// Array para almacenar el byte en 2 envios de 4 bits (y 2 envios para senales RS EN)
	uint8_t Data[4]; 

	Data[0] = DATO_HIGH | 0X0D; // EN = 1 RS = 0
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 030d 	orr.w	r3, r3, #13
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	723b      	strb	r3, [r7, #8]
	Data[1] = DATO_HIGH | 0X09;	// EN = 0 RS = 0
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f043 0309 	orr.w	r3, r3, #9
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	727b      	strb	r3, [r7, #9]
	Data[2] = DATO_LOW  | 0X0D; // EN = 1 RS = 0
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f043 030d 	orr.w	r3, r3, #13
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	72bb      	strb	r3, [r7, #10]
	Data[3] = DATO_LOW  | 0X09; // EN = 0 RS = 0
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	f043 0309 	orr.w	r3, r3, #9
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	72fb      	strb	r3, [r7, #11]

	I2C_Transmit(Data, 4);
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff53 	bl	8000d64 <I2C_Transmit>
	HAL_Delay(5);
 8000ebe:	2005      	movs	r0, #5
 8000ec0:	f000 fdc4 	bl	8001a4c <HAL_Delay>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <LCD_Send_String>:
  *
  * @param uint8_t *string
  * @retval void
  */
void LCD_Send_String(uint8_t *string)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	// Funcion para escribir una cadena de caracteres en el display

	uint8_t i = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
	while (string[i] != '\0')
 8000ed8:	e007      	b.n	8000eea <LCD_Send_String+0x1e>
	{
		LCD_Send_Char(*string);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ffc7 	bl	8000e72 <LCD_Send_Char>
		string += 1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
	while (string[i] != '\0')
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f1      	bne.n	8000eda <LCD_Send_String+0xe>
	}
	return;
 8000ef6:	bf00      	nop
}
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <LCD_Place_Cursor>:
  *
  * param uint8_t x, uint8_t y
  * @retval void
  */
void LCD_Place_Cursor(uint8_t x, uint8_t y)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	460a      	mov	r2, r1
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	71bb      	strb	r3, [r7, #6]
	uint8_t inicio[] = {0x80|0x00, 0x80|0xC0};
 8000f0e:	f24c 0380 	movw	r3, #49280	; 0xc080
 8000f12:	81bb      	strh	r3, [r7, #12]
	LCD_Send_Cmd(inicio[y-1]+x-1);
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	3310      	adds	r3, #16
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4413      	add	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b01      	subs	r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff74 	bl	8000e18 <LCD_Send_Cmd>
	HAL_Delay(10);
 8000f30:	200a      	movs	r0, #10
 8000f32:	f000 fd8b 	bl	8001a4c <HAL_Delay>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <LCD_Print>:
  *
  * @param uint8_t *String_A, uint8_t *String_B
  * @retval void
  */
void LCD_Print(uint8_t *String_A, uint8_t *String_B)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
	LCD_Place_Cursor(1,1);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f7ff ffd7 	bl	8000efe <LCD_Place_Cursor>
	LCD_Send_String((uint8_t *)String_A);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffbb 	bl	8000ecc <LCD_Send_String>
	LCD_Place_Cursor(1,2);
 8000f56:	2102      	movs	r1, #2
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff ffd0 	bl	8000efe <LCD_Place_Cursor>
	LCD_Send_String((uint8_t *)String_B);
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f7ff ffb4 	bl	8000ecc <LCD_Send_String>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SPI_Init>:
  *
  * @param void
  * @retval void
  */
void SPI_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <SPI_Init+0x64>)
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <SPI_Init+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <SPI_Init+0x64>)
 8000f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <SPI_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <SPI_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <SPI_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <SPI_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <SPI_Init+0x64>)
 8000f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <SPI_Init+0x64>)
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <SPI_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <SPI_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <SPI_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SPI_Init+0x64>)
 8000fb8:	220a      	movs	r2, #10
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <SPI_Init+0x64>)
 8000fbe:	f002 f917 	bl	80031f0 <HAL_SPI_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SPI_Init+0x60>
  {
    Error_Handler();
 8000fc8:	f7ff fcc8 	bl	800095c <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000160 	.word	0x20000160
 8000fd4:	40013000 	.word	0x40013000

08000fd8 <SPI_Transcieve>:
  *
  * @param uint8_t data Data to be transmitted.
  * @retval uint8_t rx_data Returns received data.
  */
uint8_t SPI_Transcieve(uint8_t data)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	if(HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, 100) != HAL_OK)
 8000fe2:	f107 020f 	add.w	r2, r7, #15
 8000fe6:	1df9      	adds	r1, r7, #7
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <SPI_Transcieve+0x30>)
 8000ff0:	f002 f987 	bl	8003302 <HAL_SPI_TransmitReceive>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SPI_Transcieve+0x26>
	{
		Error_Handler();
 8000ffa:	f7ff fcaf 	bl	800095c <Error_Handler>
	}
	return rx_data;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000160 	.word	0x20000160

0800100c <Green_LED_OFF>:
#include "stdint.h"
#include "stm32f4xx.h"
#include "API_Tools.h"

void Green_LED_OFF(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4802      	ldr	r0, [pc, #8]	; (8001020 <Green_LED_OFF+0x14>)
 8001018:	f000 ffd2 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020000 	.word	0x40020000

08001024 <Red_LED_ON>:

void Red_LED_ON(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4802      	ldr	r0, [pc, #8]	; (8001038 <Red_LED_ON+0x14>)
 8001030:	f000 ffc6 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020400 	.word	0x40020400

0800103c <Green_LED_Toggle>:

void Green_LED_Toggle(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <Green_LED_Toggle+0x14>)
 8001046:	f000 ffd4 	bl	8001ff2 <HAL_GPIO_TogglePin>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020000 	.word	0x40020000

08001054 <Red_LED_Toggle>:

void Red_LED_Toggle(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <Red_LED_Toggle+0x14>)
 800105e:	f000 ffc8 	bl	8001ff2 <HAL_GPIO_TogglePin>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020400 	.word	0x40020400

0800106c <Buzzer_Toggle>:

void Buzzer_Toggle(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001070:	2110      	movs	r1, #16
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <Buzzer_Toggle+0x10>)
 8001074:	f000 ffbd 	bl	8001ff2 <HAL_GPIO_TogglePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020400 	.word	0x40020400

08001080 <delayInit>:
#include "API_delay.h"
#include <stdbool.h>

// Funcion para inicializar el contador de duracion "duration"
void delayInit( delay_t * delay, tick_t duration )
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]

	delay->duration = duration;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	721a      	strb	r2, [r3, #8]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <delayRead>:

// Funcion para leer el estado del contador. Si llego al objetivo, finalizarlo y devolver true. Si no esta corriendo, iniciarlo en true.
bool_t delayRead( delay_t * delay )
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]

	if(delay->running == false)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7a1b      	ldrb	r3, [r3, #8]
 80010ae:	f083 0301 	eor.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <delayRead+0x28>
	{
		delay->running = true;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 80010be:	f000 fcb9 	bl	8001a34 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e00f      	b.n	80010ea <delayRead+0x48>
	}
	else
	{
		tick_t actual_time = HAL_GetTick();
 80010ca:	f000 fcb3 	bl	8001a34 <HAL_GetTick>
 80010ce:	60f8      	str	r0, [r7, #12]
		if (actual_time - delay->startTime >= delay->duration)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	1ad2      	subs	r2, r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d304      	bcc.n	80010ea <delayRead+0x48>
		{
			delay->running = false;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	721a      	strb	r2, [r3, #8]
			return true;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <delayRead+0x4a>
		}
	}
	return false;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <MEF_Update>:
  *
  * @param Person *People It takes a pointer to the database structure array.
  * @retval void
  */
void MEF_Update(Person *People)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	uint8_t Card_ID[16];
	uint8_t Auth_Status;
	uint8_t ID_Index;

	switch(SYSTEM_STATE)
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <MEF_Update+0xc0>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d853      	bhi.n	80011ac <MEF_Update+0xb8>
 8001104:	a201      	add	r2, pc, #4	; (adr r2, 800110c <MEF_Update+0x18>)
 8001106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110a:	bf00      	nop
 800110c:	0800111d 	.word	0x0800111d
 8001110:	08001135 	.word	0x08001135
 8001114:	08001177 	.word	0x08001177
 8001118:	0800118f 	.word	0x0800118f
	{
		case IDLE:
			/* If a card is detected, change status to Authenticate... */
			if(MEF_Idle(Card_ID) == 0)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f849 	bl	80011b8 <MEF_Idle>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d13c      	bne.n	80011a6 <MEF_Update+0xb2>
			{		
				SYSTEM_STATE = AUTHENTICATE;
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MEF_Update+0xc0>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001132:	e038      	b.n	80011a6 <MEF_Update+0xb2>
		
		case AUTHENTICATE:
			Auth_Status = MEF_Authenticate(Card_ID, People, &ID_Index);
 8001134:	f107 020b 	add.w	r2, r7, #11
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f856 	bl	80011f0 <MEF_Authenticate>
 8001144:	4603      	mov	r3, r0
 8001146:	77fb      	strb	r3, [r7, #31]

			/* If the ID has been already registered, end shift... */
			if(Auth_Status == 1)
 8001148:	7ffb      	ldrb	r3, [r7, #31]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d103      	bne.n	8001156 <MEF_Update+0x62>
			{
				SYSTEM_STATE = END_SHIFT;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MEF_Update+0xc0>)
 8001150:	2203      	movs	r2, #3
 8001152:	701a      	strb	r2, [r3, #0]
			else if(Auth_Status == 3)
			{
				MEF_Error();
				SYSTEM_STATE = IDLE;
			}
			break;
 8001154:	e029      	b.n	80011aa <MEF_Update+0xb6>
			else if(Auth_Status == 2)
 8001156:	7ffb      	ldrb	r3, [r7, #31]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d103      	bne.n	8001164 <MEF_Update+0x70>
				SYSTEM_STATE = START_SHIFT;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MEF_Update+0xc0>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
			break;
 8001162:	e022      	b.n	80011aa <MEF_Update+0xb6>
			else if(Auth_Status == 3)
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d11f      	bne.n	80011aa <MEF_Update+0xb6>
				MEF_Error();
 800116a:	f000 f9b9 	bl	80014e0 <MEF_Error>
				SYSTEM_STATE = IDLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MEF_Update+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
			break;
 8001174:	e019      	b.n	80011aa <MEF_Update+0xb6>

		case START_SHIFT:
			/* Start shift and return to idle state */
			MEF_Start_Shift(Card_ID, People, &ID_Index);
 8001176:	f107 020b 	add.w	r2, r7, #11
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8bf 	bl	8001304 <MEF_Start_Shift>
			SYSTEM_STATE = IDLE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MEF_Update+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
			break;
 800118c:	e00e      	b.n	80011ac <MEF_Update+0xb8>

		case END_SHIFT:
			/* End shift and return to idle state */
			MEF_Conclude_Shift(Card_ID, People, &ID_Index);
 800118e:	f107 020b 	add.w	r2, r7, #11
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f8f7 	bl	800138c <MEF_Conclude_Shift>
			SYSTEM_STATE = IDLE;
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <MEF_Update+0xc0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
			break;
 80011a4:	e002      	b.n	80011ac <MEF_Update+0xb8>
			break;
 80011a6:	bf00      	nop
 80011a8:	e000      	b.n	80011ac <MEF_Update+0xb8>
			break;
 80011aa:	bf00      	nop
	}
}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001b8 	.word	0x200001b8

080011b8 <MEF_Idle>:
  *
  *	@param uint8_t *Card_ID This is a pointer to a string where the ID will be stored.
  * @retval uint8_t It returns 0 when a card is present.
  */
uint8_t MEF_Idle(uint8_t *Card_ID)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	uint8_t status = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]

	Red_LED_ON();
 80011c4:	f7ff ff2e 	bl	8001024 <Red_LED_ON>
	Green_LED_OFF();
 80011c8:	f7ff ff20 	bl	800100c <Green_LED_OFF>

	/* Welcome display */
	LCD_Print(((uint8_t *)"    Welcome!    "), ((uint8_t *)" Present ID Tag "));
 80011cc:	4906      	ldr	r1, [pc, #24]	; (80011e8 <MEF_Idle+0x30>)
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MEF_Idle+0x34>)
 80011d0:	f7ff feb5 	bl	8000f3e <LCD_Print>

	/* Checks RFID card presence */
	status = RFID_Sense(Card_ID);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f9a7 	bl	8001528 <RFID_Sense>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]

	return status;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08004bd0 	.word	0x08004bd0
 80011ec:	08004be4 	.word	0x08004be4

080011f0 <MEF_Authenticate>:
  * @param uint8_t * Card_ID, Person *People It takes the card ID to authenticate and a pointer to the
  * database structure array.
  * @retval uint8_t It returns a value according to the result of the authentication.
  */
uint8_t MEF_Authenticate(uint8_t * Card_ID, Person *People, uint8_t *ID_Index)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	delay_t delay;
	tick_t Delay_Duration = 1000;
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	623b      	str	r3, [r7, #32]

	Buzzer_Toggle();
 8001202:	f7ff ff33 	bl	800106c <Buzzer_Toggle>

	LCD_Print(((uint8_t *)" Authenticating "), ((uint8_t *)"    RFID Tag    "));
 8001206:	493d      	ldr	r1, [pc, #244]	; (80012fc <MEF_Authenticate+0x10c>)
 8001208:	483d      	ldr	r0, [pc, #244]	; (8001300 <MEF_Authenticate+0x110>)
 800120a:	f7ff fe98 	bl	8000f3e <LCD_Print>
	
	delayInit(&delay, Delay_Duration);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	6a39      	ldr	r1, [r7, #32]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff33 	bl	8001080 <delayInit>
	while (delayRead(&delay) != true)
 800121a:	bf00      	nop
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff3e 	bl	80010a2 <delayRead>
 8001226:	4603      	mov	r3, r0
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f4      	bne.n	800121c <MEF_Authenticate+0x2c>
	{
	}

	Buzzer_Toggle();
 8001232:	f7ff ff1b 	bl	800106c <Buzzer_Toggle>

	/* Go over database structure array and find Card_ID */
	for(uint8_t i = 0; i < MAX_PEOPLE; i++)
 8001236:	2300      	movs	r3, #0
 8001238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800123c:	e055      	b.n	80012ea <MEF_Authenticate+0xfa>
	{
		uint8_t Equal = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/* Compare Card_ID and stored ID in database for each structure */
		for (uint8_t j = 0; j < 10; j++)
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800124a:	e01b      	b.n	8001284 <MEF_Authenticate+0x94>
		{
			if (Card_ID[j] != People[i].ID[j])
 800124c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	7819      	ldrb	r1, [r3, #0]
 8001256:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	461a      	mov	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	441a      	add	r2, r3
 8001268:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	4299      	cmp	r1, r3
 8001270:	d003      	beq.n	800127a <MEF_Authenticate+0x8a>
			{
				Equal = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8001278:	e008      	b.n	800128c <MEF_Authenticate+0x9c>
		for (uint8_t j = 0; j < 10; j++)
 800127a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800127e:	3301      	adds	r3, #1
 8001280:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001284:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001288:	2b09      	cmp	r3, #9
 800128a:	d9df      	bls.n	800124c <MEF_Authenticate+0x5c>
			}
		}

		/* If Card_ID and one ID inside the structure array match... */
		if (Equal == 1)
 800128c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001290:	2b01      	cmp	r3, #1
 8001292:	d125      	bne.n	80012e0 <MEF_Authenticate+0xf0>
		{
			Red_LED_Toggle();
 8001294:	f7ff fede 	bl	8001054 <Red_LED_Toggle>
			Green_LED_Toggle();
 8001298:	f7ff fed0 	bl	800103c <Green_LED_Toggle>

			/* Stores structure ID index in variable ID_Index */
			*ID_Index = i;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012a2:	701a      	strb	r2, [r3, #0]

			if (People[*ID_Index].Registered == 1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	461a      	mov	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	7c1b      	ldrb	r3, [r3, #16]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <MEF_Authenticate+0xd2>
			{
				/* If ID has already been registered */
				return 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	e018      	b.n	80012f4 <MEF_Authenticate+0x104>
			}
			else if (People[*ID_Index].Registered == 0)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	461a      	mov	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	4413      	add	r3, r2
 80012d6:	7c1b      	ldrb	r3, [r3, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <MEF_Authenticate+0xf0>
			{
				/* If ID is not registered */
				return 2;
 80012dc:	2302      	movs	r3, #2
 80012de:	e009      	b.n	80012f4 <MEF_Authenticate+0x104>
	for(uint8_t i = 0; i < MAX_PEOPLE; i++)
 80012e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e4:	3301      	adds	r3, #1
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d9a5      	bls.n	800123e <MEF_Authenticate+0x4e>
			}
		}
	}
	return 3;
 80012f2:	2303      	movs	r3, #3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	08004bf8 	.word	0x08004bf8
 8001300:	08004c0c 	.word	0x08004c0c

08001304 <MEF_Start_Shift>:
  * @param uint8_t * Card_ID, Person *People It takes the card ID to authenticate, a pointer to the
  * database structure array and a pointer to the ID index inside the array.
  * @retval void
  */
void MEF_Start_Shift(uint8_t * Card_ID, Person *People, uint8_t *ID_Index)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	delay_t delay;
	tick_t Delay_Duration = 1000;
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	61fb      	str	r3, [r7, #28]

	LCD_Print(((uint8_t *)" Starting Shift "), ((uint8_t *)"       OK       "));
 8001316:	491a      	ldr	r1, [pc, #104]	; (8001380 <MEF_Start_Shift+0x7c>)
 8001318:	481a      	ldr	r0, [pc, #104]	; (8001384 <MEF_Start_Shift+0x80>)
 800131a:	f7ff fe10 	bl	8000f3e <LCD_Print>

	delayInit(&delay, Delay_Duration);
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	69f9      	ldr	r1, [r7, #28]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff feab 	bl	8001080 <delayInit>
	while (delayRead(&delay) != true)
 800132a:	bf00      	nop
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff feb6 	bl	80010a2 <delayRead>
 8001336:	4603      	mov	r3, r0
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f4      	bne.n	800132c <MEF_Start_Shift+0x28>
	{
	}

	/* Set registered state inside ID structure and save current time */
	People[*ID_Index].Registered = 1;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	461a      	mov	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	4413      	add	r3, r2
 8001356:	2201      	movs	r2, #1
 8001358:	741a      	strb	r2, [r3, #16]
	People[*ID_Index].Time_Counter = Timer_Count;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MEF_Start_Shift+0x84>)
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4413      	add	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	745a      	strb	r2, [r3, #17]

	return;
 8001376:	bf00      	nop
}
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08004c20 	.word	0x08004c20
 8001384:	08004c34 	.word	0x08004c34
 8001388:	20000104 	.word	0x20000104

0800138c <MEF_Conclude_Shift>:
  * @param uint8_t * Card_ID, Person *People It takes the card ID to authenticate, a pointer to the
  * database structure array and a pointer to the ID index inside the array.
  * @retval void
  */
void MEF_Conclude_Shift(uint8_t * Card_ID, Person *People, uint8_t *ID_Index)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b09c      	sub	sp, #112	; 0x70
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	uint32_t elapsed_time = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t hours = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t minutes = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t seconds = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	65bb      	str	r3, [r7, #88]	; 0x58

	char Formatted_Time[50] = "";
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	222e      	movs	r2, #46	; 0x2e
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 ff69 	bl	800428c <memset>

	delay_t delay;
	tick_t Delay_Duration = 1000;
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	657b      	str	r3, [r7, #84]	; 0x54

	LCD_Print(((uint8_t *)"  Ending Shift  "), ((uint8_t *)"      ....      "));
 80013c0:	4940      	ldr	r1, [pc, #256]	; (80014c4 <MEF_Conclude_Shift+0x138>)
 80013c2:	4841      	ldr	r0, [pc, #260]	; (80014c8 <MEF_Conclude_Shift+0x13c>)
 80013c4:	f7ff fdbb 	bl	8000f3e <LCD_Print>

	/* Non-blocking delay for showing message on LCD */
	delayInit(&delay, Delay_Duration);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fe56 	bl	8001080 <delayInit>
	while (delayRead(&delay) != true)
 80013d4:	bf00      	nop
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fe61 	bl	80010a2 <delayRead>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f083 0301 	eor.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f4      	bne.n	80013d6 <MEF_Conclude_Shift+0x4a>
	{
	}

	/* Register elapsed time from ID registration and reset the ID states */
	elapsed_time = Timer_Count - People[*ID_Index].Time_Counter;
 80013ec:	4b37      	ldr	r3, [pc, #220]	; (80014cc <MEF_Conclude_Shift+0x140>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	460b      	mov	r3, r1
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	440b      	add	r3, r1
 8001404:	7c5b      	ldrb	r3, [r3, #17]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	667b      	str	r3, [r7, #100]	; 0x64
	People[*ID_Index].Registered = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	461a      	mov	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4413      	add	r3, r2
 800141e:	2200      	movs	r2, #0
 8001420:	741a      	strb	r2, [r3, #16]
	People[*ID_Index].Time_Counter = 0;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	4413      	add	r3, r2
 8001436:	2200      	movs	r2, #0
 8001438:	745a      	strb	r2, [r3, #17]

	/* Format elapsed time in the form HH:MM:SS */
	hours = elapsed_time / 3600;
 800143a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800143c:	4a24      	ldr	r2, [pc, #144]	; (80014d0 <MEF_Conclude_Shift+0x144>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0adb      	lsrs	r3, r3, #11
 8001444:	663b      	str	r3, [r7, #96]	; 0x60
	minutes = (elapsed_time % 3600) / 60;
 8001446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MEF_Conclude_Shift+0x144>)
 800144a:	fba3 1302 	umull	r1, r3, r3, r2
 800144e:	0adb      	lsrs	r3, r3, #11
 8001450:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <MEF_Conclude_Shift+0x148>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	095b      	lsrs	r3, r3, #5
 8001462:	65fb      	str	r3, [r7, #92]	; 0x5c
	seconds = elapsed_time % 60;
 8001464:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MEF_Conclude_Shift+0x148>)
 8001468:	fba3 1302 	umull	r1, r3, r3, r2
 800146c:	0959      	lsrs	r1, r3, #5
 800146e:	460b      	mov	r3, r1
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	1a5b      	subs	r3, r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	65bb      	str	r3, [r7, #88]	; 0x58
	sprintf(Formatted_Time, "    %02lu:%02lu:%02lu    ", hours, minutes, seconds);
 800147a:	f107 0020 	add.w	r0, r7, #32
 800147e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001486:	4914      	ldr	r1, [pc, #80]	; (80014d8 <MEF_Conclude_Shift+0x14c>)
 8001488:	f002 fee0 	bl	800424c <siprintf>

	/* Show elapsed time on display */
	LCD_Print(((uint8_t *)"  Elapsed Time  "), ((uint8_t *)Formatted_Time));
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4619      	mov	r1, r3
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <MEF_Conclude_Shift+0x150>)
 8001494:	f7ff fd53 	bl	8000f3e <LCD_Print>

	/* Non-blocking delay for showing message on LCD */
	delayInit(&delay, Delay_Duration);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fdee 	bl	8001080 <delayInit>
	while (delayRead(&delay) != true)
 80014a4:	bf00      	nop
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fdf9 	bl	80010a2 <delayRead>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f083 0301 	eor.w	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f4      	bne.n	80014a6 <MEF_Conclude_Shift+0x11a>
	{
	}

	return;
 80014bc:	bf00      	nop
}
 80014be:	3768      	adds	r7, #104	; 0x68
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	08004c48 	.word	0x08004c48
 80014c8:	08004c5c 	.word	0x08004c5c
 80014cc:	20000104 	.word	0x20000104
 80014d0:	91a2b3c5 	.word	0x91a2b3c5
 80014d4:	88888889 	.word	0x88888889
 80014d8:	08004c70 	.word	0x08004c70
 80014dc:	08004c8c 	.word	0x08004c8c

080014e0 <MEF_Error>:
  *
  * @param void
  * @retval void
  */
void MEF_Error(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
	delay_t delay;
	tick_t Delay_Duration = 1000;
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	60fb      	str	r3, [r7, #12]

	LCD_Print(((uint8_t *)"  Non-Existent  "), ((uint8_t *)"       ID       "));
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <MEF_Error+0x40>)
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MEF_Error+0x44>)
 80014f0:	f7ff fd25 	bl	8000f3e <LCD_Print>

	/* Non-blocking delay for showing message on LCD */
	delayInit(&delay, Delay_Duration);
 80014f4:	463b      	mov	r3, r7
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fdc1 	bl	8001080 <delayInit>
	while (delayRead(&delay) != true)
 80014fe:	bf00      	nop
 8001500:	463b      	mov	r3, r7
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fdcd 	bl	80010a2 <delayRead>
 8001508:	4603      	mov	r3, r0
 800150a:	f083 0301 	eor.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f5      	bne.n	8001500 <MEF_Error+0x20>
	{
	}
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	08004ca0 	.word	0x08004ca0
 8001524:	08004cb4 	.word	0x08004cb4

08001528 <RFID_Sense>:
  *
  * @param uint8_t * RFID_ID Takes a pointer to a string where the ID will be stored.
  * @retval uint8_t Returns 0 in case of detecting a card.
  */
uint8_t RFID_Sense(uint8_t * RFID_ID)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af04      	add	r7, sp, #16
 800152e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t String_ID[6];

	status = MFRC522_Request(0x26, String_ID);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4619      	mov	r1, r3
 8001536:	2026      	movs	r0, #38	; 0x26
 8001538:	f000 f9b3 	bl	80018a2 <MFRC522_Request>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
	status = MFRC522_Anticoll(String_ID);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f9d1 	bl	80018ec <MFRC522_Anticoll>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]

	sprintf(RFID_ID, "%02X%02X%02X%02X%02X", String_ID[0], String_ID[1], String_ID[2], String_ID[3], String_ID[4]);
 800154e:	7a3b      	ldrb	r3, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	7a7b      	ldrb	r3, [r7, #9]
 8001554:	461c      	mov	r4, r3
 8001556:	7abb      	ldrb	r3, [r7, #10]
 8001558:	7afa      	ldrb	r2, [r7, #11]
 800155a:	7b39      	ldrb	r1, [r7, #12]
 800155c:	9102      	str	r1, [sp, #8]
 800155e:	9201      	str	r2, [sp, #4]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	4623      	mov	r3, r4
 8001564:	4602      	mov	r2, r0
 8001566:	4904      	ldr	r1, [pc, #16]	; (8001578 <RFID_Sense+0x50>)
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f002 fe6f 	bl	800424c <siprintf>

	return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	08004cc8 	.word	0x08004cc8

0800157c <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	4613      	mov	r3, r2
 800158a:	71bb      	strb	r3, [r7, #6]

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2110      	movs	r1, #16
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <Write_MFRC522+0x48>)
 8001592:	f000 fd15 	bl	8001fc0 <HAL_GPIO_WritePin>
	SPI_Transcieve((addr<<1)&0x7E);
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fd18 	bl	8000fd8 <SPI_Transcieve>
	SPI_Transcieve(val);
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd14 	bl	8000fd8 <SPI_Transcieve>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2110      	movs	r1, #16
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <Write_MFRC522+0x48>)
 80015b6:	f000 fd03 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020000 	.word	0x40020000

080015c8 <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2110      	movs	r1, #16
 80015d6:	480f      	ldr	r0, [pc, #60]	; (8001614 <Read_MFRC522+0x4c>)
 80015d8:	f000 fcf2 	bl	8001fc0 <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	SPI_Transcieve(((addr<<1)&0x7E) | 0x80);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fcf1 	bl	8000fd8 <SPI_Transcieve>
	val = SPI_Transcieve(0x00);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff fcee 	bl	8000fd8 <SPI_Transcieve>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2110      	movs	r1, #16
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <Read_MFRC522+0x4c>)
 8001606:	f000 fcdb 	bl	8001fc0 <HAL_GPIO_WritePin>
	return val;	
 800160a:	7bfb      	ldrb	r3, [r7, #15]
	
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40020000 	.word	0x40020000

08001618 <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ffcc 	bl	80015c8 <Read_MFRC522>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	4313      	orrs	r3, r2
 800163a:	b2da      	uxtb	r2, r3
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff9b 	bl	800157c <Write_MFRC522>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	460a      	mov	r2, r1
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	4613      	mov	r3, r2
 800165c:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ffb1 	bl	80015c8 <Read_MFRC522>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800166a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800166e:	43db      	mvns	r3, r3
 8001670:	b25a      	sxtb	r2, r3
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4013      	ands	r3, r2
 8001678:	b25b      	sxtb	r3, r3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff7b 	bl	800157c <Write_MFRC522>
} 
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
	Read_MFRC522(TxControlReg);
 8001692:	2014      	movs	r0, #20
 8001694:	f7ff ff98 	bl	80015c8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001698:	2103      	movs	r1, #3
 800169a:	2014      	movs	r0, #20
 800169c:	f7ff ffbc 	bl	8001618 <SetBitMask>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80016a8:	210f      	movs	r1, #15
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff ff66 	bl	800157c <Write_MFRC522>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2110      	movs	r1, #16
 80016bc:	4812      	ldr	r0, [pc, #72]	; (8001708 <MFRC522_Init+0x54>)
 80016be:	f000 fc7f 	bl	8001fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2101      	movs	r1, #1
 80016c6:	4811      	ldr	r0, [pc, #68]	; (800170c <MFRC522_Init+0x58>)
 80016c8:	f000 fc7a 	bl	8001fc0 <HAL_GPIO_WritePin>
	
	MFRC522_Reset();
 80016cc:	f7ff ffea 	bl	80016a4 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		// auto=1; f(Timer) = 6.78MHz/TPreScaler
 80016d0:	218d      	movs	r1, #141	; 0x8d
 80016d2:	202a      	movs	r0, #42	; 0x2a
 80016d4:	f7ff ff52 	bl	800157c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	// TModeReg[3..0] + TPrescalerReg
 80016d8:	213e      	movs	r1, #62	; 0x3e
 80016da:	202b      	movs	r0, #43	; 0x2b
 80016dc:	f7ff ff4e 	bl	800157c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 80016e0:	211e      	movs	r1, #30
 80016e2:	202d      	movs	r0, #45	; 0x2d
 80016e4:	f7ff ff4a 	bl	800157c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80016e8:	2100      	movs	r1, #0
 80016ea:	202c      	movs	r0, #44	; 0x2c
 80016ec:	f7ff ff46 	bl	800157c <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	2015      	movs	r0, #21
 80016f4:	f7ff ff42 	bl	800157c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);
 80016f8:	213d      	movs	r1, #61	; 0x3d
 80016fa:	2011      	movs	r0, #17
 80016fc:	f7ff ff3e 	bl	800157c <Write_MFRC522>

	AntennaOn();
 8001700:	f7ff ffc5 	bl	800168e <AntennaOn>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400

08001710 <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	4613      	mov	r3, r2
 8001720:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8001722:	2302      	movs	r3, #2
 8001724:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b0c      	cmp	r3, #12
 8001732:	d006      	beq.n	8001742 <MFRC522_ToCard+0x32>
 8001734:	2b0e      	cmp	r3, #14
 8001736:	d109      	bne.n	800174c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8001738:	2312      	movs	r3, #18
 800173a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 800173c:	2310      	movs	r3, #16
 800173e:	777b      	strb	r3, [r7, #29]
			break;
 8001740:	e005      	b.n	800174e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 8001742:	2377      	movs	r3, #119	; 0x77
 8001744:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001746:	2330      	movs	r3, #48	; 0x30
 8001748:	777b      	strb	r3, [r7, #29]
			break;
 800174a:	e000      	b.n	800174e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800174c:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 800174e:	7fbb      	ldrb	r3, [r7, #30]
 8001750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	2002      	movs	r0, #2
 800175a:	f7ff ff0f 	bl	800157c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	2004      	movs	r0, #4
 8001762:	f7ff ff74 	bl	800164e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	200a      	movs	r0, #10
 800176a:	f7ff ff55 	bl	8001618 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 800176e:	2100      	movs	r1, #0
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff ff03 	bl	800157c <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	e00a      	b.n	8001792 <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4413      	add	r3, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	2009      	movs	r0, #9
 8001788:	f7ff fef8 	bl	800157c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3301      	adds	r3, #1
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	429a      	cmp	r2, r3
 8001798:	d3f0      	bcc.n	800177c <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	4619      	mov	r1, r3
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff feec 	bl	800157c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d103      	bne.n	80017b2 <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	200d      	movs	r0, #13
 80017ae:	f7ff ff33 	bl	8001618 <SetBitMask>
	}   
    
	i = 2000;
 80017b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017b6:	61bb      	str	r3, [r7, #24]
    do 
    {
        n = Read_MFRC522(CommIrqReg);
 80017b8:	2004      	movs	r0, #4
 80017ba:	f7ff ff05 	bl	80015c8 <Read_MFRC522>
 80017be:	4603      	mov	r3, r0
 80017c0:	773b      	strb	r3, [r7, #28]
        i--;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <MFRC522_ToCard+0xd4>
 80017ce:	7f3b      	ldrb	r3, [r7, #28]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <MFRC522_ToCard+0xd4>
 80017d8:	7f3a      	ldrb	r2, [r7, #28]
 80017da:	7f7b      	ldrb	r3, [r7, #29]
 80017dc:	4013      	ands	r3, r2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0e9      	beq.n	80017b8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	200d      	movs	r0, #13
 80017e8:	f7ff ff31 	bl	800164e <ClearBitMask>
	
    if (i != 0)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d052      	beq.n	8001898 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))
 80017f2:	2006      	movs	r0, #6
 80017f4:	f7ff fee8 	bl	80015c8 <Read_MFRC522>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f003 031b 	and.w	r3, r3, #27
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d148      	bne.n	8001894 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001806:	7f3a      	ldrb	r2, [r7, #28]
 8001808:	7fbb      	ldrb	r3, [r7, #30]
 800180a:	4013      	ands	r3, r2
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8001816:	2301      	movs	r3, #1
 8001818:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d13b      	bne.n	8001898 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001820:	200a      	movs	r0, #10
 8001822:	f7ff fed1 	bl	80015c8 <Read_MFRC522>
 8001826:	4603      	mov	r3, r0
 8001828:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800182a:	200c      	movs	r0, #12
 800182c:	f7ff fecc 	bl	80015c8 <Read_MFRC522>
 8001830:	4603      	mov	r3, r0
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800183e:	7f3b      	ldrb	r3, [r7, #28]
 8001840:	3b01      	subs	r3, #1
 8001842:	00da      	lsls	r2, r3, #3
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	4413      	add	r3, r2
 8001848:	461a      	mov	r2, r3
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	e004      	b.n	800185a <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8001850:	7f3b      	ldrb	r3, [r7, #28]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	461a      	mov	r2, r3
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001858:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800185a:	7f3b      	ldrb	r3, [r7, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8001860:	2301      	movs	r3, #1
 8001862:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001864:	7f3b      	ldrb	r3, [r7, #28]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d901      	bls.n	800186e <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 800186a:	2310      	movs	r3, #16
 800186c:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	e00a      	b.n	800188a <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	18d4      	adds	r4, r2, r3
 800187a:	2009      	movs	r0, #9
 800187c:	f7ff fea4 	bl	80015c8 <Read_MFRC522>
 8001880:	4603      	mov	r3, r0
 8001882:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	3301      	adds	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	7f3b      	ldrb	r3, [r7, #28]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	429a      	cmp	r2, r3
 8001890:	d3f0      	bcc.n	8001874 <MFRC522_ToCard+0x164>
 8001892:	e001      	b.n	8001898 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8001894:	2302      	movs	r3, #2
 8001896:	77fb      	strb	r3, [r7, #31]
		}
        
    }
    return status;
 8001898:	7ffb      	ldrb	r3, [r7, #31]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}

080018a2 <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af02      	add	r7, sp, #8
 80018a8:	4603      	mov	r3, r0
 80018aa:	6039      	str	r1, [r7, #0]
 80018ac:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint backBits;

	Write_MFRC522(BitFramingReg, 0x07);
 80018ae:	2107      	movs	r1, #7
 80018b0:	200d      	movs	r0, #13
 80018b2:	f7ff fe63 	bl	800157c <Write_MFRC522>
	
	TagType[0] = reqMode;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2201      	movs	r2, #1
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	200c      	movs	r0, #12
 80018ca:	f7ff ff21 	bl	8001710 <MFRC522_ToCard>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <MFRC522_Request+0x3c>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d001      	beq.n	80018e2 <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 80018de:	2302      	movs	r3, #2
 80018e0:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);
 80018f8:	2100      	movs	r1, #0
 80018fa:	200d      	movs	r0, #13
 80018fc:	f7ff fe3e 	bl	800157c <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2293      	movs	r2, #147	; 0x93
 8001904:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3301      	adds	r3, #1
 800190a:	2220      	movs	r2, #32
 800190c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	200c      	movs	r0, #12
 800191c:	f7ff fef8 	bl	8001710 <MFRC522_ToCard>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d118      	bne.n	800195c <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 800192a:	2300      	movs	r3, #0
 800192c:	73bb      	strb	r3, [r7, #14]
 800192e:	e009      	b.n	8001944 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	7b7b      	ldrb	r3, [r7, #13]
 800193a:	4053      	eors	r3, r2
 800193c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800193e:	7bbb      	ldrb	r3, [r7, #14]
 8001940:	3301      	adds	r3, #1
 8001942:	73bb      	strb	r3, [r7, #14]
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d9f2      	bls.n	8001930 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800194a:	7bbb      	ldrb	r3, [r7, #14]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	7b7a      	ldrb	r2, [r7, #13]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8001958:	2302      	movs	r3, #2
 800195a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
} 
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <HAL_Init+0x40>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_Init+0x40>)
 800197e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x40>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f94f 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7fe ffe6 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f967 	bl	8001c9e <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f92f 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	200001bc 	.word	0x200001bc

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200001bc 	.word	0x200001bc

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a72:	bf00      	nop
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <__NVIC_EnableIRQ+0x38>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f7ff ff8e 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff29 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff3e 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff8e 	bl	8001b88 <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff31 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa2 	bl	8001bf0 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e159      	b.n	8001f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8148 	bne.w	8001f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d017      	beq.n	8001da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a2 	beq.w	8001f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_GPIO_Init+0x2ec>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x2f0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d019      	beq.n	8001eba <HAL_GPIO_Init+0x202>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_GPIO_Init+0x2f4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0x1fe>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a47      	ldr	r2, [pc, #284]	; (8001fb0 <HAL_GPIO_Init+0x2f8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00d      	beq.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a46      	ldr	r2, [pc, #280]	; (8001fb4 <HAL_GPIO_Init+0x2fc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d007      	beq.n	8001eae <HAL_GPIO_Init+0x1f6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_GPIO_Init+0x300>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_GPIO_Init+0x1f2>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e008      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e004      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f002 0203 	and.w	r2, r2, #3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	4093      	lsls	r3, r2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ecc:	4935      	ldr	r1, [pc, #212]	; (8001fa4 <HAL_GPIO_Init+0x2ec>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efe:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	f67f aea2 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40013800 	.word	0x40013800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43d9      	mvns	r1, r3
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	400b      	ands	r3, r1
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e12b      	b.n	8002292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe fcb4 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2224      	movs	r2, #36	; 0x24
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800207a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800208a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800208c:	f001 f888 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a81      	ldr	r2, [pc, #516]	; (800229c <HAL_I2C_Init+0x274>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d807      	bhi.n	80020ac <HAL_I2C_Init+0x84>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a80      	ldr	r2, [pc, #512]	; (80022a0 <HAL_I2C_Init+0x278>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e006      	b.n	80020ba <HAL_I2C_Init+0x92>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a7d      	ldr	r2, [pc, #500]	; (80022a4 <HAL_I2C_Init+0x27c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf94      	ite	ls
 80020b4:	2301      	movls	r3, #1
 80020b6:	2300      	movhi	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0e7      	b.n	8002292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a78      	ldr	r2, [pc, #480]	; (80022a8 <HAL_I2C_Init+0x280>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9b      	lsrs	r3, r3, #18
 80020cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_I2C_Init+0x274>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d802      	bhi.n	80020fc <HAL_I2C_Init+0xd4>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3301      	adds	r3, #1
 80020fa:	e009      	b.n	8002110 <HAL_I2C_Init+0xe8>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	4a69      	ldr	r2, [pc, #420]	; (80022ac <HAL_I2C_Init+0x284>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	3301      	adds	r3, #1
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	495c      	ldr	r1, [pc, #368]	; (800229c <HAL_I2C_Init+0x274>)
 800212c:	428b      	cmp	r3, r1
 800212e:	d819      	bhi.n	8002164 <HAL_I2C_Init+0x13c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e59      	subs	r1, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fbb1 f3f3 	udiv	r3, r1, r3
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002144:	400b      	ands	r3, r1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_I2C_Init+0x138>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e59      	subs	r1, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fbb1 f3f3 	udiv	r3, r1, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215e:	e051      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 8002160:	2304      	movs	r3, #4
 8002162:	e04f      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <HAL_I2C_Init+0x168>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1e58      	subs	r0, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	440b      	add	r3, r1
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	3301      	adds	r3, #1
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e012      	b.n	80021b6 <HAL_I2C_Init+0x18e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e58      	subs	r0, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	0099      	lsls	r1, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Init+0x196>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e022      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10e      	bne.n	80021e4 <HAL_I2C_Init+0x1bc>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e58      	subs	r0, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	440b      	add	r3, r1
 80021d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e2:	e00f      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	0099      	lsls	r1, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	6809      	ldr	r1, [r1, #0]
 8002208:	4313      	orrs	r3, r2
 800220a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6911      	ldr	r1, [r2, #16]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68d2      	ldr	r2, [r2, #12]
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	000186a0 	.word	0x000186a0
 80022a0:	001e847f 	.word	0x001e847f
 80022a4:	003d08ff 	.word	0x003d08ff
 80022a8:	431bde83 	.word	0x431bde83
 80022ac:	10624dd3 	.word	0x10624dd3

080022b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	460b      	mov	r3, r1
 80022be:	817b      	strh	r3, [r7, #10]
 80022c0:	4613      	mov	r3, r2
 80022c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff fbb6 	bl	8001a34 <HAL_GetTick>
 80022c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	f040 80e0 	bne.w	8002498 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2319      	movs	r3, #25
 80022de:	2201      	movs	r2, #1
 80022e0:	4970      	ldr	r1, [pc, #448]	; (80024a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f964 	bl	80025b0 <I2C_WaitOnFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
 80022f0:	e0d3      	b.n	800249a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_I2C_Master_Transmit+0x50>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0cc      	b.n	800249a <HAL_I2C_Master_Transmit+0x1ea>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d007      	beq.n	8002326 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002334:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2221      	movs	r2, #33	; 0x21
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2210      	movs	r2, #16
 8002342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	893a      	ldrh	r2, [r7, #8]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4a50      	ldr	r2, [pc, #320]	; (80024a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002368:	8979      	ldrh	r1, [r7, #10]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f89c 	bl	80024ac <I2C_MasterRequestWrite>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e08d      	b.n	800249a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002394:	e066      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	6a39      	ldr	r1, [r7, #32]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f9de 	bl	800275c <I2C_WaitOnTXEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d107      	bne.n	80023be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06b      	b.n	800249a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d11b      	bne.n	8002438 <HAL_I2C_Master_Transmit+0x188>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d017      	beq.n	8002438 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	6a39      	ldr	r1, [r7, #32]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f9ce 	bl	80027de <I2C_WaitOnBTFFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	2b04      	cmp	r3, #4
 800244e:	d107      	bne.n	8002460 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e01a      	b.n	800249a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	d194      	bne.n	8002396 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	00100002 	.word	0x00100002
 80024a8:	ffff0000 	.word	0xffff0000

080024ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	460b      	mov	r3, r1
 80024ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d006      	beq.n	80024d6 <I2C_MasterRequestWrite+0x2a>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d003      	beq.n	80024d6 <I2C_MasterRequestWrite+0x2a>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024d4:	d108      	bne.n	80024e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e00b      	b.n	8002500 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	2b12      	cmp	r3, #18
 80024ee:	d107      	bne.n	8002500 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f84f 	bl	80025b0 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002526:	d103      	bne.n	8002530 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e035      	b.n	80025a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800253c:	d108      	bne.n	8002550 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800253e:	897b      	ldrh	r3, [r7, #10]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	e01b      	b.n	8002588 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002550:	897b      	ldrh	r3, [r7, #10]
 8002552:	11db      	asrs	r3, r3, #7
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f003 0306 	and.w	r3, r3, #6
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f063 030f 	orn	r3, r3, #15
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <I2C_MasterRequestWrite+0xfc>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f875 	bl	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e010      	b.n	80025a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <I2C_MasterRequestWrite+0x100>)
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f865 	bl	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	00010008 	.word	0x00010008
 80025ac:	00010002 	.word	0x00010002

080025b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c0:	e025      	b.n	800260e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d021      	beq.n	800260e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff fa33 	bl	8001a34 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d116      	bne.n	800260e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e023      	b.n	8002656 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10d      	bne.n	8002634 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4013      	ands	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	e00c      	b.n	800264e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4013      	ands	r3, r2
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf0c      	ite	eq
 8002646:	2301      	moveq	r3, #1
 8002648:	2300      	movne	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	429a      	cmp	r2, r3
 8002652:	d0b6      	beq.n	80025c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800266c:	e051      	b.n	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267c:	d123      	bne.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002696:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0204 	orr.w	r2, r3, #4
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e046      	b.n	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d021      	beq.n	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7ff f9b1 	bl	8001a34 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d116      	bne.n	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f043 0220 	orr.w	r2, r3, #32
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e020      	b.n	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10c      	bne.n	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	e00b      	b.n	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	43da      	mvns	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4013      	ands	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d18d      	bne.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002768:	e02d      	b.n	80027c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f878 	bl	8002860 <I2C_IsAcknowledgeFailed>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e02d      	b.n	80027d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d021      	beq.n	80027c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002782:	f7ff f957 	bl	8001a34 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e007      	b.n	80027d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d1ca      	bne.n	800276a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ea:	e02d      	b.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f837 	bl	8002860 <I2C_IsAcknowledgeFailed>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e02d      	b.n	8002858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002802:	d021      	beq.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002804:	f7ff f916 	bl	8001a34 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	d302      	bcc.n	800281a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d116      	bne.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e007      	b.n	8002858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d1ca      	bne.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002876:	d11b      	bne.n	80028b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002880:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f043 0204 	orr.w	r2, r3, #4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e267      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d075      	beq.n	80029ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d00c      	beq.n	8002904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ea:	4b85      	ldr	r3, [pc, #532]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d112      	bne.n	800291c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f6:	4b82      	ldr	r3, [pc, #520]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002902:	d10b      	bne.n	800291c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	4b7e      	ldr	r3, [pc, #504]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d05b      	beq.n	80029c8 <HAL_RCC_OscConfig+0x108>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d157      	bne.n	80029c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e242      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d106      	bne.n	8002934 <HAL_RCC_OscConfig+0x74>
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a75      	ldr	r2, [pc, #468]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e01d      	b.n	8002970 <HAL_RCC_OscConfig+0xb0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x98>
 800293e:	4b70      	ldr	r3, [pc, #448]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6f      	ldr	r2, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a6c      	ldr	r2, [pc, #432]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0xb0>
 8002958:	4b69      	ldr	r3, [pc, #420]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a68      	ldr	r2, [pc, #416]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff f85c 	bl	8001a34 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff f858 	bl	8001a34 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e207      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b5b      	ldr	r3, [pc, #364]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0xc0>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff f848 	bl	8001a34 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff f844 	bl	8001a34 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1f3      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	4b51      	ldr	r3, [pc, #324]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0xe8>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d063      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d6:	4b4a      	ldr	r3, [pc, #296]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d11c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ee:	4b44      	ldr	r3, [pc, #272]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d116      	bne.n	8002a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x152>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e1c7      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4937      	ldr	r1, [pc, #220]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	e03a      	b.n	8002a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a30:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <HAL_RCC_OscConfig+0x244>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7fe fffd 	bl	8001a34 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fff9 	bl	8001a34 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1a8      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4925      	ldr	r1, [pc, #148]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
 8002a70:	e015      	b.n	8002a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_OscConfig+0x244>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe ffdc 	bl	8001a34 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fe ffd8 	bl	8001a34 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e187      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d036      	beq.n	8002b18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d016      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x248>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe ffbc 	bl	8001a34 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7fe ffb8 	bl	8001a34 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e167      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x200>
 8002ade:	e01b      	b.n	8002b18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_OscConfig+0x248>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7fe ffa5 	bl	8001a34 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aec:	e00e      	b.n	8002b0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aee:	f7fe ffa1 	bl	8001a34 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d907      	bls.n	8002b0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e150      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470000 	.word	0x42470000
 8002b08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ea      	bne.n	8002aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8097 	beq.w	8002c54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	4b7d      	ldr	r3, [pc, #500]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a7c      	ldr	r2, [pc, #496]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b7a      	ldr	r3, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b77      	ldr	r3, [pc, #476]	; (8002d34 <HAL_RCC_OscConfig+0x474>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	4b74      	ldr	r3, [pc, #464]	; (8002d34 <HAL_RCC_OscConfig+0x474>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a73      	ldr	r2, [pc, #460]	; (8002d34 <HAL_RCC_OscConfig+0x474>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe ff61 	bl	8001a34 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe ff5d 	bl	8001a34 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e10c      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <HAL_RCC_OscConfig+0x474>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x2ea>
 8002b9c:	4b64      	ldr	r3, [pc, #400]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a63      	ldr	r2, [pc, #396]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCC_OscConfig+0x324>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x30c>
 8002bb2:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a5e      	ldr	r2, [pc, #376]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbe:	4b5c      	ldr	r3, [pc, #368]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0x324>
 8002bcc:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd8:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4a54      	ldr	r2, [pc, #336]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bde:	f023 0304 	bic.w	r3, r3, #4
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe ff22 	bl	8001a34 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe ff1e 	bl	8001a34 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0cb      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0a:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0ee      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x334>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7fe ff0c 	bl	8001a34 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7fe ff08 	bl	8001a34 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0b5      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c36:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1ee      	bne.n	8002c20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4a38      	ldr	r2, [pc, #224]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a1 	beq.w	8002da0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c5e:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d05c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d141      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_RCC_OscConfig+0x478>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fedc 	bl	8001a34 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fed8 	bl	8001a34 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e087      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	491b      	ldr	r1, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x478>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7fe feb1 	bl	8001a34 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe fead 	bl	8001a34 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e05c      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x416>
 8002cf4:	e054      	b.n	8002da0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_OscConfig+0x478>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fe9a 	bl	8001a34 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe fe96 	bl	8001a34 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e045      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x444>
 8002d22:	e03d      	b.n	8002da0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e038      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000
 8002d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x4ec>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d028      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d121      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d11a      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d111      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	3b01      	subs	r3, #1
 8002d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0cc      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d90c      	bls.n	8002dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b65      	ldr	r3, [pc, #404]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0b8      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e04:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a58      	ldr	r2, [pc, #352]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e1c:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4a52      	ldr	r2, [pc, #328]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	494d      	ldr	r1, [pc, #308]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d044      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d119      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e07f      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d003      	beq.n	8002e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06f      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e067      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4934      	ldr	r1, [pc, #208]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fdc8 	bl	8001a34 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7fe fdc4 	bl	8001a34 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e04f      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 020c 	and.w	r2, r3, #12
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1eb      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d20c      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e032      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4916      	ldr	r1, [pc, #88]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	490e      	ldr	r1, [pc, #56]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f36:	f000 f821 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	490a      	ldr	r1, [pc, #40]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	5ccb      	ldrb	r3, [r1, r3]
 8002f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fd28 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023c00 	.word	0x40023c00
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	08004ce0 	.word	0x08004ce0
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20000004 	.word	0x20000004

08002f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f80:	b094      	sub	sp, #80	; 0x50
 8002f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	647b      	str	r3, [r7, #68]	; 0x44
 8002f88:	2300      	movs	r3, #0
 8002f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f94:	4b79      	ldr	r3, [pc, #484]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d00d      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x40>
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	f200 80e1 	bhi.w	8003168 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fae:	e0db      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb0:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fb4:	e0db      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fb6:	4b73      	ldr	r3, [pc, #460]	; (8003184 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fba:	e0d8      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fbc:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc6:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d063      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd2:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	2200      	movs	r2, #0
 8002fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fee:	4622      	mov	r2, r4
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	0159      	lsls	r1, r3, #5
 8002ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003000:	0150      	lsls	r0, r2, #5
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4621      	mov	r1, r4
 8003008:	1a51      	subs	r1, r2, r1
 800300a:	6139      	str	r1, [r7, #16]
 800300c:	4629      	mov	r1, r5
 800300e:	eb63 0301 	sbc.w	r3, r3, r1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003020:	4659      	mov	r1, fp
 8003022:	018b      	lsls	r3, r1, #6
 8003024:	4651      	mov	r1, sl
 8003026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302a:	4651      	mov	r1, sl
 800302c:	018a      	lsls	r2, r1, #6
 800302e:	4651      	mov	r1, sl
 8003030:	ebb2 0801 	subs.w	r8, r2, r1
 8003034:	4659      	mov	r1, fp
 8003036:	eb63 0901 	sbc.w	r9, r3, r1
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800304a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304e:	4690      	mov	r8, r2
 8003050:	4699      	mov	r9, r3
 8003052:	4623      	mov	r3, r4
 8003054:	eb18 0303 	adds.w	r3, r8, r3
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	462b      	mov	r3, r5
 800305c:	eb49 0303 	adc.w	r3, r9, r3
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800306e:	4629      	mov	r1, r5
 8003070:	024b      	lsls	r3, r1, #9
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003078:	4621      	mov	r1, r4
 800307a:	024a      	lsls	r2, r1, #9
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003082:	2200      	movs	r2, #0
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
 8003086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003088:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800308c:	f7fd f8f8 	bl	8000280 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003098:	e058      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	2200      	movs	r2, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	4611      	mov	r1, r2
 80030a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030b4:	4642      	mov	r2, r8
 80030b6:	464b      	mov	r3, r9
 80030b8:	f04f 0000 	mov.w	r0, #0
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	0159      	lsls	r1, r3, #5
 80030c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c6:	0150      	lsls	r0, r2, #5
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4641      	mov	r1, r8
 80030ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80030d2:	4649      	mov	r1, r9
 80030d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030ec:	ebb2 040a 	subs.w	r4, r2, sl
 80030f0:	eb63 050b 	sbc.w	r5, r3, fp
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	00eb      	lsls	r3, r5, #3
 80030fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003102:	00e2      	lsls	r2, r4, #3
 8003104:	4614      	mov	r4, r2
 8003106:	461d      	mov	r5, r3
 8003108:	4643      	mov	r3, r8
 800310a:	18e3      	adds	r3, r4, r3
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	464b      	mov	r3, r9
 8003110:	eb45 0303 	adc.w	r3, r5, r3
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003122:	4629      	mov	r1, r5
 8003124:	028b      	lsls	r3, r1, #10
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312c:	4621      	mov	r1, r4
 800312e:	028a      	lsls	r2, r1, #10
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003136:	2200      	movs	r2, #0
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	61fa      	str	r2, [r7, #28]
 800313c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003140:	f7fd f89e 	bl	8000280 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800315c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800315e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetSysClockFreq+0x204>)
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003170:	4618      	mov	r0, r3
 8003172:	3750      	adds	r7, #80	; 0x50
 8003174:	46bd      	mov	sp, r7
 8003176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	00f42400 	.word	0x00f42400
 8003184:	007a1200 	.word	0x007a1200

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_RCC_GetHCLKFreq+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000000 	.word	0x20000000

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a4:	f7ff fff0 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0a9b      	lsrs	r3, r3, #10
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	08004cf0 	.word	0x08004cf0

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031cc:	f7ff ffdc 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0b5b      	lsrs	r3, r3, #13
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	08004cf0 	.word	0x08004cf0

080031f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e07b      	b.n	80032fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b00      	cmp	r3, #0
 8003208:	d108      	bne.n	800321c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003212:	d009      	beq.n	8003228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
 800321a:	e005      	b.n	8003228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fc02 	bl	8000a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	ea42 0103 	orr.w	r1, r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0104 	and.w	r1, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f003 0210 	and.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b08c      	sub	sp, #48	; 0x30
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003310:	2301      	movs	r3, #1
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x26>
 8003324:	2302      	movs	r3, #2
 8003326:	e18a      	b.n	800363e <HAL_SPI_TransmitReceive+0x33c>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003330:	f7fe fb80 	bl	8001a34 <HAL_GetTick>
 8003334:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800333c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800334a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800334e:	2b01      	cmp	r3, #1
 8003350:	d00f      	beq.n	8003372 <HAL_SPI_TransmitReceive+0x70>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003358:	d107      	bne.n	800336a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <HAL_SPI_TransmitReceive+0x68>
 8003362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003366:	2b04      	cmp	r3, #4
 8003368:	d003      	beq.n	8003372 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800336a:	2302      	movs	r3, #2
 800336c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003370:	e15b      	b.n	800362a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x82>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x82>
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d103      	bne.n	800338c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800338a:	e14e      	b.n	800362a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b04      	cmp	r3, #4
 8003396:	d003      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2205      	movs	r2, #5
 800339c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	887a      	ldrh	r2, [r7, #2]
 80033c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d007      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fc:	d178      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_SPI_TransmitReceive+0x10a>
 8003406:	8b7b      	ldrh	r3, [r7, #26]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d166      	bne.n	80034da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	1c9a      	adds	r2, r3, #2
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003430:	e053      	b.n	80034da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d11b      	bne.n	8003478 <HAL_SPI_TransmitReceive+0x176>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x176>
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d113      	bne.n	8003478 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	881a      	ldrh	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	1c9a      	adds	r2, r3, #2
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d119      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x1b8>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d014      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	b292      	uxth	r2, r2
 800349c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	1c9a      	adds	r2, r3, #2
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034b6:	2301      	movs	r3, #1
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034ba:	f7fe fabb 	bl	8001a34 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d807      	bhi.n	80034da <HAL_SPI_TransmitReceive+0x1d8>
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d003      	beq.n	80034da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034d8:	e0a7      	b.n	800362a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1a6      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x130>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1a1      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x130>
 80034ee:	e07c      	b.n	80035ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x1fc>
 80034f8:	8b7b      	ldrh	r3, [r7, #26]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d16b      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003524:	e057      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b02      	cmp	r3, #2
 8003532:	d11c      	bne.n	800356e <HAL_SPI_TransmitReceive+0x26c>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d017      	beq.n	800356e <HAL_SPI_TransmitReceive+0x26c>
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d114      	bne.n	800356e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d119      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x2ae>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d014      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ac:	2301      	movs	r3, #1
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035b0:	f7fe fa40 	bl	8001a34 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035bc:	429a      	cmp	r2, r3
 80035be:	d803      	bhi.n	80035c8 <HAL_SPI_TransmitReceive+0x2c6>
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d102      	bne.n	80035ce <HAL_SPI_TransmitReceive+0x2cc>
 80035c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035d4:	e029      	b.n	800362a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1a2      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x224>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d19d      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f8b2 	bl	8003758 <SPI_EndRxTxTransaction>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d006      	beq.n	8003608 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003606:	e010      	b.n	800362a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	e000      	b.n	800362a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003628:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800363a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800363e:	4618      	mov	r0, r3
 8003640:	3730      	adds	r7, #48	; 0x30
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003658:	f7fe f9ec 	bl	8001a34 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4413      	add	r3, r2
 8003666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003668:	f7fe f9e4 	bl	8001a34 <HAL_GetTick>
 800366c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800366e:	4b39      	ldr	r3, [pc, #228]	; (8003754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	015b      	lsls	r3, r3, #5
 8003674:	0d1b      	lsrs	r3, r3, #20
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800367e:	e054      	b.n	800372a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d050      	beq.n	800372a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003688:	f7fe f9d4 	bl	8001a34 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	429a      	cmp	r2, r3
 8003696:	d902      	bls.n	800369e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d13d      	bne.n	800371a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b6:	d111      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c0:	d004      	beq.n	80036cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	d107      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e4:	d10f      	bne.n	8003706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e017      	b.n	800374a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3b01      	subs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	429a      	cmp	r2, r3
 8003746:	d19b      	bne.n	8003680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000000 	.word	0x20000000

08003758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <SPI_EndRxTxTransaction+0x7c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <SPI_EndRxTxTransaction+0x80>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0d5b      	lsrs	r3, r3, #21
 8003770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003782:	d112      	bne.n	80037aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7ff ff5a 	bl	8003648 <SPI_WaitFlagStateUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f043 0220 	orr.w	r2, r3, #32
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e00f      	b.n	80037ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	2b80      	cmp	r3, #128	; 0x80
 80037c2:	d0f2      	beq.n	80037aa <SPI_EndRxTxTransaction+0x52>
 80037c4:	e000      	b.n	80037c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80037c6:	bf00      	nop
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000000 	.word	0x20000000
 80037d8:	165e9f81 	.word	0x165e9f81

080037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e041      	b.n	8003872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd f96a 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 f9c0 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d001      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e044      	b.n	800391e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1e      	ldr	r2, [pc, #120]	; (800392c <HAL_TIM_Base_Start_IT+0xb0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d013      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <HAL_TIM_Base_Start_IT+0xb4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_TIM_Base_Start_IT+0xb8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <HAL_TIM_Base_Start_IT+0xbc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x6c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_TIM_Base_Start_IT+0xc0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d111      	bne.n	800390c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d010      	beq.n	800391c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390a:	e007      	b.n	800391c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40010000 	.word	0x40010000
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800
 8003938:	40000c00 	.word	0x40000c00
 800393c:	40014000 	.word	0x40014000

08003940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d122      	bne.n	800399c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	d11b      	bne.n	800399c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0202 	mvn.w	r2, #2
 800396c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8ee 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8e0 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8f1 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d122      	bne.n	80039f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d11b      	bne.n	80039f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0204 	mvn.w	r2, #4
 80039c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8c4 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8b6 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8c7 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d122      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d11b      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0208 	mvn.w	r2, #8
 8003a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2204      	movs	r2, #4
 8003a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f89a 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f88c 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f89d 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0210 	mvn.w	r2, #16
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f870 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f862 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f873 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0201 	mvn.w	r2, #1
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc fd5c 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b80      	cmp	r3, #128	; 0x80
 8003ad0:	d10e      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8e2 	bl	8003cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d10e      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d107      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f838 	bl	8003b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d10e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0220 	mvn.w	r2, #32
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8ac 	bl	8003ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a34      	ldr	r2, [pc, #208]	; (8003c84 <TIM_Base_SetConfig+0xe4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0x38>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x38>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <TIM_Base_SetConfig+0xe8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x38>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <TIM_Base_SetConfig+0xec>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x38>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a2f      	ldr	r2, [pc, #188]	; (8003c90 <TIM_Base_SetConfig+0xf0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a25      	ldr	r2, [pc, #148]	; (8003c84 <TIM_Base_SetConfig+0xe4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01b      	beq.n	8003c2a <TIM_Base_SetConfig+0x8a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d017      	beq.n	8003c2a <TIM_Base_SetConfig+0x8a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <TIM_Base_SetConfig+0xe8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <TIM_Base_SetConfig+0x8a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <TIM_Base_SetConfig+0xec>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00f      	beq.n	8003c2a <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <TIM_Base_SetConfig+0xf0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <TIM_Base_SetConfig+0x8a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <TIM_Base_SetConfig+0xf4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_Base_SetConfig+0x8a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <TIM_Base_SetConfig+0xf8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0x8a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <TIM_Base_SetConfig+0xfc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <TIM_Base_SetConfig+0xe4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d103      	bne.n	8003c70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	615a      	str	r2, [r3, #20]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e03f      	b.n	8003d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc ff1c 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f829 	bl	8003d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d68:	b0c0      	sub	sp, #256	; 0x100
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	68d9      	ldr	r1, [r3, #12]
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	ea40 0301 	orr.w	r3, r0, r1
 8003d8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dbc:	f021 010c 	bic.w	r1, r1, #12
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	6999      	ldr	r1, [r3, #24]
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	ea40 0301 	orr.w	r3, r0, r1
 8003dea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b8f      	ldr	r3, [pc, #572]	; (8004030 <UART_SetConfig+0x2cc>)
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d005      	beq.n	8003e04 <UART_SetConfig+0xa0>
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b8d      	ldr	r3, [pc, #564]	; (8004034 <UART_SetConfig+0x2d0>)
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d104      	bne.n	8003e0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7ff f9e0 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 8003e08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e0c:	e003      	b.n	8003e16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e0e:	f7ff f9c7 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8003e12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e20:	f040 810c 	bne.w	800403c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e36:	4622      	mov	r2, r4
 8003e38:	462b      	mov	r3, r5
 8003e3a:	1891      	adds	r1, r2, r2
 8003e3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e3e:	415b      	adcs	r3, r3
 8003e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e46:	4621      	mov	r1, r4
 8003e48:	eb12 0801 	adds.w	r8, r2, r1
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	eb43 0901 	adc.w	r9, r3, r1
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e66:	4690      	mov	r8, r2
 8003e68:	4699      	mov	r9, r3
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	eb18 0303 	adds.w	r3, r8, r3
 8003e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e74:	462b      	mov	r3, r5
 8003e76:	eb49 0303 	adc.w	r3, r9, r3
 8003e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e92:	460b      	mov	r3, r1
 8003e94:	18db      	adds	r3, r3, r3
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50
 8003e98:	4613      	mov	r3, r2
 8003e9a:	eb42 0303 	adc.w	r3, r2, r3
 8003e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ea8:	f7fc f9ea 	bl	8000280 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4b61      	ldr	r3, [pc, #388]	; (8004038 <UART_SetConfig+0x2d4>)
 8003eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	011c      	lsls	r4, r3, #4
 8003eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ecc:	4642      	mov	r2, r8
 8003ece:	464b      	mov	r3, r9
 8003ed0:	1891      	adds	r1, r2, r2
 8003ed2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ed4:	415b      	adcs	r3, r3
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003edc:	4641      	mov	r1, r8
 8003ede:	eb12 0a01 	adds.w	sl, r2, r1
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ef4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003efc:	4692      	mov	sl, r2
 8003efe:	469b      	mov	fp, r3
 8003f00:	4643      	mov	r3, r8
 8003f02:	eb1a 0303 	adds.w	r3, sl, r3
 8003f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	18db      	adds	r3, r3, r3
 8003f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f2e:	4613      	mov	r3, r2
 8003f30:	eb42 0303 	adc.w	r3, r2, r3
 8003f34:	647b      	str	r3, [r7, #68]	; 0x44
 8003f36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f3e:	f7fc f99f 	bl	8000280 <__aeabi_uldivmod>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <UART_SetConfig+0x2d4>)
 8003f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2264      	movs	r2, #100	; 0x64
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	1acb      	subs	r3, r1, r3
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f5e:	4b36      	ldr	r3, [pc, #216]	; (8004038 <UART_SetConfig+0x2d4>)
 8003f60:	fba3 2302 	umull	r2, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f6c:	441c      	add	r4, r3
 8003f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	1891      	adds	r1, r2, r2
 8003f86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f90:	4641      	mov	r1, r8
 8003f92:	1851      	adds	r1, r2, r1
 8003f94:	6339      	str	r1, [r7, #48]	; 0x30
 8003f96:	4649      	mov	r1, r9
 8003f98:	414b      	adcs	r3, r1
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fa8:	4659      	mov	r1, fp
 8003faa:	00cb      	lsls	r3, r1, #3
 8003fac:	4651      	mov	r1, sl
 8003fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	00ca      	lsls	r2, r1, #3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	eb42 0303 	adc.w	r3, r2, r3
 8003fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	18db      	adds	r3, r3, r3
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	4613      	mov	r3, r2
 8003fec:	eb42 0303 	adc.w	r3, r2, r3
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ffa:	f7fc f941 	bl	8000280 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <UART_SetConfig+0x2d4>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	; 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <UART_SetConfig+0x2d4>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 0207 	and.w	r2, r3, #7
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4422      	add	r2, r4
 800402a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800402c:	e106      	b.n	800423c <UART_SetConfig+0x4d8>
 800402e:	bf00      	nop
 8004030:	40011000 	.word	0x40011000
 8004034:	40011400 	.word	0x40011400
 8004038:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800403c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004046:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800404a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800404e:	4642      	mov	r2, r8
 8004050:	464b      	mov	r3, r9
 8004052:	1891      	adds	r1, r2, r2
 8004054:	6239      	str	r1, [r7, #32]
 8004056:	415b      	adcs	r3, r3
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800405e:	4641      	mov	r1, r8
 8004060:	1854      	adds	r4, r2, r1
 8004062:	4649      	mov	r1, r9
 8004064:	eb43 0501 	adc.w	r5, r3, r1
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	00eb      	lsls	r3, r5, #3
 8004072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004076:	00e2      	lsls	r2, r4, #3
 8004078:	4614      	mov	r4, r2
 800407a:	461d      	mov	r5, r3
 800407c:	4643      	mov	r3, r8
 800407e:	18e3      	adds	r3, r4, r3
 8004080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004084:	464b      	mov	r3, r9
 8004086:	eb45 0303 	adc.w	r3, r5, r3
 800408a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800409a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040aa:	4629      	mov	r1, r5
 80040ac:	008b      	lsls	r3, r1, #2
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b4:	4621      	mov	r1, r4
 80040b6:	008a      	lsls	r2, r1, #2
 80040b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040bc:	f7fc f8e0 	bl	8000280 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4b60      	ldr	r3, [pc, #384]	; (8004248 <UART_SetConfig+0x4e4>)
 80040c6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	011c      	lsls	r4, r3, #4
 80040ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	1891      	adds	r1, r2, r2
 80040e6:	61b9      	str	r1, [r7, #24]
 80040e8:	415b      	adcs	r3, r3
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f0:	4641      	mov	r1, r8
 80040f2:	1851      	adds	r1, r2, r1
 80040f4:	6139      	str	r1, [r7, #16]
 80040f6:	4649      	mov	r1, r9
 80040f8:	414b      	adcs	r3, r1
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004108:	4659      	mov	r1, fp
 800410a:	00cb      	lsls	r3, r1, #3
 800410c:	4651      	mov	r1, sl
 800410e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004112:	4651      	mov	r1, sl
 8004114:	00ca      	lsls	r2, r1, #3
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	4603      	mov	r3, r0
 800411c:	4642      	mov	r2, r8
 800411e:	189b      	adds	r3, r3, r2
 8004120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004124:	464b      	mov	r3, r9
 8004126:	460a      	mov	r2, r1
 8004128:	eb42 0303 	adc.w	r3, r2, r3
 800412c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	67bb      	str	r3, [r7, #120]	; 0x78
 800413a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004148:	4649      	mov	r1, r9
 800414a:	008b      	lsls	r3, r1, #2
 800414c:	4641      	mov	r1, r8
 800414e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004152:	4641      	mov	r1, r8
 8004154:	008a      	lsls	r2, r1, #2
 8004156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800415a:	f7fc f891 	bl	8000280 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4611      	mov	r1, r2
 8004164:	4b38      	ldr	r3, [pc, #224]	; (8004248 <UART_SetConfig+0x4e4>)
 8004166:	fba3 2301 	umull	r2, r3, r3, r1
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2264      	movs	r2, #100	; 0x64
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	1acb      	subs	r3, r1, r3
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	3332      	adds	r3, #50	; 0x32
 8004178:	4a33      	ldr	r2, [pc, #204]	; (8004248 <UART_SetConfig+0x4e4>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004184:	441c      	add	r4, r3
 8004186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418a:	2200      	movs	r2, #0
 800418c:	673b      	str	r3, [r7, #112]	; 0x70
 800418e:	677a      	str	r2, [r7, #116]	; 0x74
 8004190:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	1891      	adds	r1, r2, r2
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	415b      	adcs	r3, r3
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a4:	4641      	mov	r1, r8
 80041a6:	1851      	adds	r1, r2, r1
 80041a8:	6039      	str	r1, [r7, #0]
 80041aa:	4649      	mov	r1, r9
 80041ac:	414b      	adcs	r3, r1
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041bc:	4659      	mov	r1, fp
 80041be:	00cb      	lsls	r3, r1, #3
 80041c0:	4651      	mov	r1, sl
 80041c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c6:	4651      	mov	r1, sl
 80041c8:	00ca      	lsls	r2, r1, #3
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	4642      	mov	r2, r8
 80041d2:	189b      	adds	r3, r3, r2
 80041d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041d6:	464b      	mov	r3, r9
 80041d8:	460a      	mov	r2, r1
 80041da:	eb42 0303 	adc.w	r3, r2, r3
 80041de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ea:	667a      	str	r2, [r7, #100]	; 0x64
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041f8:	4649      	mov	r1, r9
 80041fa:	008b      	lsls	r3, r1, #2
 80041fc:	4641      	mov	r1, r8
 80041fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004202:	4641      	mov	r1, r8
 8004204:	008a      	lsls	r2, r1, #2
 8004206:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800420a:	f7fc f839 	bl	8000280 <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <UART_SetConfig+0x4e4>)
 8004214:	fba3 1302 	umull	r1, r3, r3, r2
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	2164      	movs	r1, #100	; 0x64
 800421c:	fb01 f303 	mul.w	r3, r1, r3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	3332      	adds	r3, #50	; 0x32
 8004226:	4a08      	ldr	r2, [pc, #32]	; (8004248 <UART_SetConfig+0x4e4>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	f003 020f 	and.w	r2, r3, #15
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4422      	add	r2, r4
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004242:	46bd      	mov	sp, r7
 8004244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <siprintf>:
 800424c:	b40e      	push	{r1, r2, r3}
 800424e:	b500      	push	{lr}
 8004250:	b09c      	sub	sp, #112	; 0x70
 8004252:	ab1d      	add	r3, sp, #116	; 0x74
 8004254:	9002      	str	r0, [sp, #8]
 8004256:	9006      	str	r0, [sp, #24]
 8004258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800425c:	4809      	ldr	r0, [pc, #36]	; (8004284 <siprintf+0x38>)
 800425e:	9107      	str	r1, [sp, #28]
 8004260:	9104      	str	r1, [sp, #16]
 8004262:	4909      	ldr	r1, [pc, #36]	; (8004288 <siprintf+0x3c>)
 8004264:	f853 2b04 	ldr.w	r2, [r3], #4
 8004268:	9105      	str	r1, [sp, #20]
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	a902      	add	r1, sp, #8
 8004270:	f000 f992 	bl	8004598 <_svfiprintf_r>
 8004274:	9b02      	ldr	r3, [sp, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	b01c      	add	sp, #112	; 0x70
 800427c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004280:	b003      	add	sp, #12
 8004282:	4770      	bx	lr
 8004284:	20000058 	.word	0x20000058
 8004288:	ffff0208 	.word	0xffff0208

0800428c <memset>:
 800428c:	4402      	add	r2, r0
 800428e:	4603      	mov	r3, r0
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <memset+0xa>
 8004294:	4770      	bx	lr
 8004296:	f803 1b01 	strb.w	r1, [r3], #1
 800429a:	e7f9      	b.n	8004290 <memset+0x4>

0800429c <__errno>:
 800429c:	4b01      	ldr	r3, [pc, #4]	; (80042a4 <__errno+0x8>)
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000058 	.word	0x20000058

080042a8 <__libc_init_array>:
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	4d0d      	ldr	r5, [pc, #52]	; (80042e0 <__libc_init_array+0x38>)
 80042ac:	4c0d      	ldr	r4, [pc, #52]	; (80042e4 <__libc_init_array+0x3c>)
 80042ae:	1b64      	subs	r4, r4, r5
 80042b0:	10a4      	asrs	r4, r4, #2
 80042b2:	2600      	movs	r6, #0
 80042b4:	42a6      	cmp	r6, r4
 80042b6:	d109      	bne.n	80042cc <__libc_init_array+0x24>
 80042b8:	4d0b      	ldr	r5, [pc, #44]	; (80042e8 <__libc_init_array+0x40>)
 80042ba:	4c0c      	ldr	r4, [pc, #48]	; (80042ec <__libc_init_array+0x44>)
 80042bc:	f000 fc6a 	bl	8004b94 <_init>
 80042c0:	1b64      	subs	r4, r4, r5
 80042c2:	10a4      	asrs	r4, r4, #2
 80042c4:	2600      	movs	r6, #0
 80042c6:	42a6      	cmp	r6, r4
 80042c8:	d105      	bne.n	80042d6 <__libc_init_array+0x2e>
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
 80042cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d0:	4798      	blx	r3
 80042d2:	3601      	adds	r6, #1
 80042d4:	e7ee      	b.n	80042b4 <__libc_init_array+0xc>
 80042d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042da:	4798      	blx	r3
 80042dc:	3601      	adds	r6, #1
 80042de:	e7f2      	b.n	80042c6 <__libc_init_array+0x1e>
 80042e0:	08004d34 	.word	0x08004d34
 80042e4:	08004d34 	.word	0x08004d34
 80042e8:	08004d34 	.word	0x08004d34
 80042ec:	08004d38 	.word	0x08004d38

080042f0 <__retarget_lock_acquire_recursive>:
 80042f0:	4770      	bx	lr

080042f2 <__retarget_lock_release_recursive>:
 80042f2:	4770      	bx	lr

080042f4 <_free_r>:
 80042f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042f6:	2900      	cmp	r1, #0
 80042f8:	d044      	beq.n	8004384 <_free_r+0x90>
 80042fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fe:	9001      	str	r0, [sp, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f1a1 0404 	sub.w	r4, r1, #4
 8004306:	bfb8      	it	lt
 8004308:	18e4      	addlt	r4, r4, r3
 800430a:	f000 f8df 	bl	80044cc <__malloc_lock>
 800430e:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <_free_r+0x94>)
 8004310:	9801      	ldr	r0, [sp, #4]
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	b933      	cbnz	r3, 8004324 <_free_r+0x30>
 8004316:	6063      	str	r3, [r4, #4]
 8004318:	6014      	str	r4, [r2, #0]
 800431a:	b003      	add	sp, #12
 800431c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004320:	f000 b8da 	b.w	80044d8 <__malloc_unlock>
 8004324:	42a3      	cmp	r3, r4
 8004326:	d908      	bls.n	800433a <_free_r+0x46>
 8004328:	6825      	ldr	r5, [r4, #0]
 800432a:	1961      	adds	r1, r4, r5
 800432c:	428b      	cmp	r3, r1
 800432e:	bf01      	itttt	eq
 8004330:	6819      	ldreq	r1, [r3, #0]
 8004332:	685b      	ldreq	r3, [r3, #4]
 8004334:	1949      	addeq	r1, r1, r5
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	e7ed      	b.n	8004316 <_free_r+0x22>
 800433a:	461a      	mov	r2, r3
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b10b      	cbz	r3, 8004344 <_free_r+0x50>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d9fa      	bls.n	800433a <_free_r+0x46>
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	1855      	adds	r5, r2, r1
 8004348:	42a5      	cmp	r5, r4
 800434a:	d10b      	bne.n	8004364 <_free_r+0x70>
 800434c:	6824      	ldr	r4, [r4, #0]
 800434e:	4421      	add	r1, r4
 8004350:	1854      	adds	r4, r2, r1
 8004352:	42a3      	cmp	r3, r4
 8004354:	6011      	str	r1, [r2, #0]
 8004356:	d1e0      	bne.n	800431a <_free_r+0x26>
 8004358:	681c      	ldr	r4, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	6053      	str	r3, [r2, #4]
 800435e:	440c      	add	r4, r1
 8004360:	6014      	str	r4, [r2, #0]
 8004362:	e7da      	b.n	800431a <_free_r+0x26>
 8004364:	d902      	bls.n	800436c <_free_r+0x78>
 8004366:	230c      	movs	r3, #12
 8004368:	6003      	str	r3, [r0, #0]
 800436a:	e7d6      	b.n	800431a <_free_r+0x26>
 800436c:	6825      	ldr	r5, [r4, #0]
 800436e:	1961      	adds	r1, r4, r5
 8004370:	428b      	cmp	r3, r1
 8004372:	bf04      	itt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	bf04      	itt	eq
 800437c:	1949      	addeq	r1, r1, r5
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	6054      	str	r4, [r2, #4]
 8004382:	e7ca      	b.n	800431a <_free_r+0x26>
 8004384:	b003      	add	sp, #12
 8004386:	bd30      	pop	{r4, r5, pc}
 8004388:	20000300 	.word	0x20000300

0800438c <sbrk_aligned>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	4e0e      	ldr	r6, [pc, #56]	; (80043c8 <sbrk_aligned+0x3c>)
 8004390:	460c      	mov	r4, r1
 8004392:	6831      	ldr	r1, [r6, #0]
 8004394:	4605      	mov	r5, r0
 8004396:	b911      	cbnz	r1, 800439e <sbrk_aligned+0x12>
 8004398:	f000 fba6 	bl	8004ae8 <_sbrk_r>
 800439c:	6030      	str	r0, [r6, #0]
 800439e:	4621      	mov	r1, r4
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 fba1 	bl	8004ae8 <_sbrk_r>
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	d00a      	beq.n	80043c0 <sbrk_aligned+0x34>
 80043aa:	1cc4      	adds	r4, r0, #3
 80043ac:	f024 0403 	bic.w	r4, r4, #3
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d007      	beq.n	80043c4 <sbrk_aligned+0x38>
 80043b4:	1a21      	subs	r1, r4, r0
 80043b6:	4628      	mov	r0, r5
 80043b8:	f000 fb96 	bl	8004ae8 <_sbrk_r>
 80043bc:	3001      	adds	r0, #1
 80043be:	d101      	bne.n	80043c4 <sbrk_aligned+0x38>
 80043c0:	f04f 34ff 	mov.w	r4, #4294967295
 80043c4:	4620      	mov	r0, r4
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	20000304 	.word	0x20000304

080043cc <_malloc_r>:
 80043cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d0:	1ccd      	adds	r5, r1, #3
 80043d2:	f025 0503 	bic.w	r5, r5, #3
 80043d6:	3508      	adds	r5, #8
 80043d8:	2d0c      	cmp	r5, #12
 80043da:	bf38      	it	cc
 80043dc:	250c      	movcc	r5, #12
 80043de:	2d00      	cmp	r5, #0
 80043e0:	4607      	mov	r7, r0
 80043e2:	db01      	blt.n	80043e8 <_malloc_r+0x1c>
 80043e4:	42a9      	cmp	r1, r5
 80043e6:	d905      	bls.n	80043f4 <_malloc_r+0x28>
 80043e8:	230c      	movs	r3, #12
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	2600      	movs	r6, #0
 80043ee:	4630      	mov	r0, r6
 80043f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044c8 <_malloc_r+0xfc>
 80043f8:	f000 f868 	bl	80044cc <__malloc_lock>
 80043fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004400:	461c      	mov	r4, r3
 8004402:	bb5c      	cbnz	r4, 800445c <_malloc_r+0x90>
 8004404:	4629      	mov	r1, r5
 8004406:	4638      	mov	r0, r7
 8004408:	f7ff ffc0 	bl	800438c <sbrk_aligned>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	4604      	mov	r4, r0
 8004410:	d155      	bne.n	80044be <_malloc_r+0xf2>
 8004412:	f8d8 4000 	ldr.w	r4, [r8]
 8004416:	4626      	mov	r6, r4
 8004418:	2e00      	cmp	r6, #0
 800441a:	d145      	bne.n	80044a8 <_malloc_r+0xdc>
 800441c:	2c00      	cmp	r4, #0
 800441e:	d048      	beq.n	80044b2 <_malloc_r+0xe6>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	4631      	mov	r1, r6
 8004424:	4638      	mov	r0, r7
 8004426:	eb04 0903 	add.w	r9, r4, r3
 800442a:	f000 fb5d 	bl	8004ae8 <_sbrk_r>
 800442e:	4581      	cmp	r9, r0
 8004430:	d13f      	bne.n	80044b2 <_malloc_r+0xe6>
 8004432:	6821      	ldr	r1, [r4, #0]
 8004434:	1a6d      	subs	r5, r5, r1
 8004436:	4629      	mov	r1, r5
 8004438:	4638      	mov	r0, r7
 800443a:	f7ff ffa7 	bl	800438c <sbrk_aligned>
 800443e:	3001      	adds	r0, #1
 8004440:	d037      	beq.n	80044b2 <_malloc_r+0xe6>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	442b      	add	r3, r5
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	f8d8 3000 	ldr.w	r3, [r8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d038      	beq.n	80044c2 <_malloc_r+0xf6>
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	42a2      	cmp	r2, r4
 8004454:	d12b      	bne.n	80044ae <_malloc_r+0xe2>
 8004456:	2200      	movs	r2, #0
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	e00f      	b.n	800447c <_malloc_r+0xb0>
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	1b52      	subs	r2, r2, r5
 8004460:	d41f      	bmi.n	80044a2 <_malloc_r+0xd6>
 8004462:	2a0b      	cmp	r2, #11
 8004464:	d917      	bls.n	8004496 <_malloc_r+0xca>
 8004466:	1961      	adds	r1, r4, r5
 8004468:	42a3      	cmp	r3, r4
 800446a:	6025      	str	r5, [r4, #0]
 800446c:	bf18      	it	ne
 800446e:	6059      	strne	r1, [r3, #4]
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	bf08      	it	eq
 8004474:	f8c8 1000 	streq.w	r1, [r8]
 8004478:	5162      	str	r2, [r4, r5]
 800447a:	604b      	str	r3, [r1, #4]
 800447c:	4638      	mov	r0, r7
 800447e:	f104 060b 	add.w	r6, r4, #11
 8004482:	f000 f829 	bl	80044d8 <__malloc_unlock>
 8004486:	f026 0607 	bic.w	r6, r6, #7
 800448a:	1d23      	adds	r3, r4, #4
 800448c:	1af2      	subs	r2, r6, r3
 800448e:	d0ae      	beq.n	80043ee <_malloc_r+0x22>
 8004490:	1b9b      	subs	r3, r3, r6
 8004492:	50a3      	str	r3, [r4, r2]
 8004494:	e7ab      	b.n	80043ee <_malloc_r+0x22>
 8004496:	42a3      	cmp	r3, r4
 8004498:	6862      	ldr	r2, [r4, #4]
 800449a:	d1dd      	bne.n	8004458 <_malloc_r+0x8c>
 800449c:	f8c8 2000 	str.w	r2, [r8]
 80044a0:	e7ec      	b.n	800447c <_malloc_r+0xb0>
 80044a2:	4623      	mov	r3, r4
 80044a4:	6864      	ldr	r4, [r4, #4]
 80044a6:	e7ac      	b.n	8004402 <_malloc_r+0x36>
 80044a8:	4634      	mov	r4, r6
 80044aa:	6876      	ldr	r6, [r6, #4]
 80044ac:	e7b4      	b.n	8004418 <_malloc_r+0x4c>
 80044ae:	4613      	mov	r3, r2
 80044b0:	e7cc      	b.n	800444c <_malloc_r+0x80>
 80044b2:	230c      	movs	r3, #12
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4638      	mov	r0, r7
 80044b8:	f000 f80e 	bl	80044d8 <__malloc_unlock>
 80044bc:	e797      	b.n	80043ee <_malloc_r+0x22>
 80044be:	6025      	str	r5, [r4, #0]
 80044c0:	e7dc      	b.n	800447c <_malloc_r+0xb0>
 80044c2:	605b      	str	r3, [r3, #4]
 80044c4:	deff      	udf	#255	; 0xff
 80044c6:	bf00      	nop
 80044c8:	20000300 	.word	0x20000300

080044cc <__malloc_lock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	; (80044d4 <__malloc_lock+0x8>)
 80044ce:	f7ff bf0f 	b.w	80042f0 <__retarget_lock_acquire_recursive>
 80044d2:	bf00      	nop
 80044d4:	200002fc 	.word	0x200002fc

080044d8 <__malloc_unlock>:
 80044d8:	4801      	ldr	r0, [pc, #4]	; (80044e0 <__malloc_unlock+0x8>)
 80044da:	f7ff bf0a 	b.w	80042f2 <__retarget_lock_release_recursive>
 80044de:	bf00      	nop
 80044e0:	200002fc 	.word	0x200002fc

080044e4 <__ssputs_r>:
 80044e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	688e      	ldr	r6, [r1, #8]
 80044ea:	461f      	mov	r7, r3
 80044ec:	42be      	cmp	r6, r7
 80044ee:	680b      	ldr	r3, [r1, #0]
 80044f0:	4682      	mov	sl, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	4690      	mov	r8, r2
 80044f6:	d82c      	bhi.n	8004552 <__ssputs_r+0x6e>
 80044f8:	898a      	ldrh	r2, [r1, #12]
 80044fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044fe:	d026      	beq.n	800454e <__ssputs_r+0x6a>
 8004500:	6965      	ldr	r5, [r4, #20]
 8004502:	6909      	ldr	r1, [r1, #16]
 8004504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004508:	eba3 0901 	sub.w	r9, r3, r1
 800450c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004510:	1c7b      	adds	r3, r7, #1
 8004512:	444b      	add	r3, r9
 8004514:	106d      	asrs	r5, r5, #1
 8004516:	429d      	cmp	r5, r3
 8004518:	bf38      	it	cc
 800451a:	461d      	movcc	r5, r3
 800451c:	0553      	lsls	r3, r2, #21
 800451e:	d527      	bpl.n	8004570 <__ssputs_r+0x8c>
 8004520:	4629      	mov	r1, r5
 8004522:	f7ff ff53 	bl	80043cc <_malloc_r>
 8004526:	4606      	mov	r6, r0
 8004528:	b360      	cbz	r0, 8004584 <__ssputs_r+0xa0>
 800452a:	6921      	ldr	r1, [r4, #16]
 800452c:	464a      	mov	r2, r9
 800452e:	f000 faeb 	bl	8004b08 <memcpy>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	81a3      	strh	r3, [r4, #12]
 800453e:	6126      	str	r6, [r4, #16]
 8004540:	6165      	str	r5, [r4, #20]
 8004542:	444e      	add	r6, r9
 8004544:	eba5 0509 	sub.w	r5, r5, r9
 8004548:	6026      	str	r6, [r4, #0]
 800454a:	60a5      	str	r5, [r4, #8]
 800454c:	463e      	mov	r6, r7
 800454e:	42be      	cmp	r6, r7
 8004550:	d900      	bls.n	8004554 <__ssputs_r+0x70>
 8004552:	463e      	mov	r6, r7
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	4632      	mov	r2, r6
 8004558:	4641      	mov	r1, r8
 800455a:	f000 faab 	bl	8004ab4 <memmove>
 800455e:	68a3      	ldr	r3, [r4, #8]
 8004560:	1b9b      	subs	r3, r3, r6
 8004562:	60a3      	str	r3, [r4, #8]
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	4433      	add	r3, r6
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	2000      	movs	r0, #0
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	462a      	mov	r2, r5
 8004572:	f000 fad7 	bl	8004b24 <_realloc_r>
 8004576:	4606      	mov	r6, r0
 8004578:	2800      	cmp	r0, #0
 800457a:	d1e0      	bne.n	800453e <__ssputs_r+0x5a>
 800457c:	6921      	ldr	r1, [r4, #16]
 800457e:	4650      	mov	r0, sl
 8004580:	f7ff feb8 	bl	80042f4 <_free_r>
 8004584:	230c      	movs	r3, #12
 8004586:	f8ca 3000 	str.w	r3, [sl]
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	e7e9      	b.n	800456c <__ssputs_r+0x88>

08004598 <_svfiprintf_r>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	4698      	mov	r8, r3
 800459e:	898b      	ldrh	r3, [r1, #12]
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	b09d      	sub	sp, #116	; 0x74
 80045a4:	4607      	mov	r7, r0
 80045a6:	460d      	mov	r5, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	d50e      	bpl.n	80045ca <_svfiprintf_r+0x32>
 80045ac:	690b      	ldr	r3, [r1, #16]
 80045ae:	b963      	cbnz	r3, 80045ca <_svfiprintf_r+0x32>
 80045b0:	2140      	movs	r1, #64	; 0x40
 80045b2:	f7ff ff0b 	bl	80043cc <_malloc_r>
 80045b6:	6028      	str	r0, [r5, #0]
 80045b8:	6128      	str	r0, [r5, #16]
 80045ba:	b920      	cbnz	r0, 80045c6 <_svfiprintf_r+0x2e>
 80045bc:	230c      	movs	r3, #12
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	e0d0      	b.n	8004768 <_svfiprintf_r+0x1d0>
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	616b      	str	r3, [r5, #20]
 80045ca:	2300      	movs	r3, #0
 80045cc:	9309      	str	r3, [sp, #36]	; 0x24
 80045ce:	2320      	movs	r3, #32
 80045d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80045d8:	2330      	movs	r3, #48	; 0x30
 80045da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004780 <_svfiprintf_r+0x1e8>
 80045de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045e2:	f04f 0901 	mov.w	r9, #1
 80045e6:	4623      	mov	r3, r4
 80045e8:	469a      	mov	sl, r3
 80045ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ee:	b10a      	cbz	r2, 80045f4 <_svfiprintf_r+0x5c>
 80045f0:	2a25      	cmp	r2, #37	; 0x25
 80045f2:	d1f9      	bne.n	80045e8 <_svfiprintf_r+0x50>
 80045f4:	ebba 0b04 	subs.w	fp, sl, r4
 80045f8:	d00b      	beq.n	8004612 <_svfiprintf_r+0x7a>
 80045fa:	465b      	mov	r3, fp
 80045fc:	4622      	mov	r2, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	4638      	mov	r0, r7
 8004602:	f7ff ff6f 	bl	80044e4 <__ssputs_r>
 8004606:	3001      	adds	r0, #1
 8004608:	f000 80a9 	beq.w	800475e <_svfiprintf_r+0x1c6>
 800460c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800460e:	445a      	add	r2, fp
 8004610:	9209      	str	r2, [sp, #36]	; 0x24
 8004612:	f89a 3000 	ldrb.w	r3, [sl]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80a1 	beq.w	800475e <_svfiprintf_r+0x1c6>
 800461c:	2300      	movs	r3, #0
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004626:	f10a 0a01 	add.w	sl, sl, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	9307      	str	r3, [sp, #28]
 800462e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004632:	931a      	str	r3, [sp, #104]	; 0x68
 8004634:	4654      	mov	r4, sl
 8004636:	2205      	movs	r2, #5
 8004638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463c:	4850      	ldr	r0, [pc, #320]	; (8004780 <_svfiprintf_r+0x1e8>)
 800463e:	f7fb fdcf 	bl	80001e0 <memchr>
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	b9d8      	cbnz	r0, 800467e <_svfiprintf_r+0xe6>
 8004646:	06d0      	lsls	r0, r2, #27
 8004648:	bf44      	itt	mi
 800464a:	2320      	movmi	r3, #32
 800464c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004650:	0711      	lsls	r1, r2, #28
 8004652:	bf44      	itt	mi
 8004654:	232b      	movmi	r3, #43	; 0x2b
 8004656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800465a:	f89a 3000 	ldrb.w	r3, [sl]
 800465e:	2b2a      	cmp	r3, #42	; 0x2a
 8004660:	d015      	beq.n	800468e <_svfiprintf_r+0xf6>
 8004662:	9a07      	ldr	r2, [sp, #28]
 8004664:	4654      	mov	r4, sl
 8004666:	2000      	movs	r0, #0
 8004668:	f04f 0c0a 	mov.w	ip, #10
 800466c:	4621      	mov	r1, r4
 800466e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004672:	3b30      	subs	r3, #48	; 0x30
 8004674:	2b09      	cmp	r3, #9
 8004676:	d94d      	bls.n	8004714 <_svfiprintf_r+0x17c>
 8004678:	b1b0      	cbz	r0, 80046a8 <_svfiprintf_r+0x110>
 800467a:	9207      	str	r2, [sp, #28]
 800467c:	e014      	b.n	80046a8 <_svfiprintf_r+0x110>
 800467e:	eba0 0308 	sub.w	r3, r0, r8
 8004682:	fa09 f303 	lsl.w	r3, r9, r3
 8004686:	4313      	orrs	r3, r2
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	46a2      	mov	sl, r4
 800468c:	e7d2      	b.n	8004634 <_svfiprintf_r+0x9c>
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	9103      	str	r1, [sp, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfbb      	ittet	lt
 800469a:	425b      	neglt	r3, r3
 800469c:	f042 0202 	orrlt.w	r2, r2, #2
 80046a0:	9307      	strge	r3, [sp, #28]
 80046a2:	9307      	strlt	r3, [sp, #28]
 80046a4:	bfb8      	it	lt
 80046a6:	9204      	strlt	r2, [sp, #16]
 80046a8:	7823      	ldrb	r3, [r4, #0]
 80046aa:	2b2e      	cmp	r3, #46	; 0x2e
 80046ac:	d10c      	bne.n	80046c8 <_svfiprintf_r+0x130>
 80046ae:	7863      	ldrb	r3, [r4, #1]
 80046b0:	2b2a      	cmp	r3, #42	; 0x2a
 80046b2:	d134      	bne.n	800471e <_svfiprintf_r+0x186>
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	9203      	str	r2, [sp, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bfb8      	it	lt
 80046c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80046c4:	3402      	adds	r4, #2
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004790 <_svfiprintf_r+0x1f8>
 80046cc:	7821      	ldrb	r1, [r4, #0]
 80046ce:	2203      	movs	r2, #3
 80046d0:	4650      	mov	r0, sl
 80046d2:	f7fb fd85 	bl	80001e0 <memchr>
 80046d6:	b138      	cbz	r0, 80046e8 <_svfiprintf_r+0x150>
 80046d8:	9b04      	ldr	r3, [sp, #16]
 80046da:	eba0 000a 	sub.w	r0, r0, sl
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	4082      	lsls	r2, r0
 80046e2:	4313      	orrs	r3, r2
 80046e4:	3401      	adds	r4, #1
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ec:	4825      	ldr	r0, [pc, #148]	; (8004784 <_svfiprintf_r+0x1ec>)
 80046ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046f2:	2206      	movs	r2, #6
 80046f4:	f7fb fd74 	bl	80001e0 <memchr>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d038      	beq.n	800476e <_svfiprintf_r+0x1d6>
 80046fc:	4b22      	ldr	r3, [pc, #136]	; (8004788 <_svfiprintf_r+0x1f0>)
 80046fe:	bb1b      	cbnz	r3, 8004748 <_svfiprintf_r+0x1b0>
 8004700:	9b03      	ldr	r3, [sp, #12]
 8004702:	3307      	adds	r3, #7
 8004704:	f023 0307 	bic.w	r3, r3, #7
 8004708:	3308      	adds	r3, #8
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470e:	4433      	add	r3, r6
 8004710:	9309      	str	r3, [sp, #36]	; 0x24
 8004712:	e768      	b.n	80045e6 <_svfiprintf_r+0x4e>
 8004714:	fb0c 3202 	mla	r2, ip, r2, r3
 8004718:	460c      	mov	r4, r1
 800471a:	2001      	movs	r0, #1
 800471c:	e7a6      	b.n	800466c <_svfiprintf_r+0xd4>
 800471e:	2300      	movs	r3, #0
 8004720:	3401      	adds	r4, #1
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	4619      	mov	r1, r3
 8004726:	f04f 0c0a 	mov.w	ip, #10
 800472a:	4620      	mov	r0, r4
 800472c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004730:	3a30      	subs	r2, #48	; 0x30
 8004732:	2a09      	cmp	r2, #9
 8004734:	d903      	bls.n	800473e <_svfiprintf_r+0x1a6>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0c6      	beq.n	80046c8 <_svfiprintf_r+0x130>
 800473a:	9105      	str	r1, [sp, #20]
 800473c:	e7c4      	b.n	80046c8 <_svfiprintf_r+0x130>
 800473e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004742:	4604      	mov	r4, r0
 8004744:	2301      	movs	r3, #1
 8004746:	e7f0      	b.n	800472a <_svfiprintf_r+0x192>
 8004748:	ab03      	add	r3, sp, #12
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	462a      	mov	r2, r5
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <_svfiprintf_r+0x1f4>)
 8004750:	a904      	add	r1, sp, #16
 8004752:	4638      	mov	r0, r7
 8004754:	f3af 8000 	nop.w
 8004758:	1c42      	adds	r2, r0, #1
 800475a:	4606      	mov	r6, r0
 800475c:	d1d6      	bne.n	800470c <_svfiprintf_r+0x174>
 800475e:	89ab      	ldrh	r3, [r5, #12]
 8004760:	065b      	lsls	r3, r3, #25
 8004762:	f53f af2d 	bmi.w	80045c0 <_svfiprintf_r+0x28>
 8004766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004768:	b01d      	add	sp, #116	; 0x74
 800476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476e:	ab03      	add	r3, sp, #12
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	462a      	mov	r2, r5
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <_svfiprintf_r+0x1f4>)
 8004776:	a904      	add	r1, sp, #16
 8004778:	4638      	mov	r0, r7
 800477a:	f000 f879 	bl	8004870 <_printf_i>
 800477e:	e7eb      	b.n	8004758 <_svfiprintf_r+0x1c0>
 8004780:	08004cf8 	.word	0x08004cf8
 8004784:	08004d02 	.word	0x08004d02
 8004788:	00000000 	.word	0x00000000
 800478c:	080044e5 	.word	0x080044e5
 8004790:	08004cfe 	.word	0x08004cfe

08004794 <_printf_common>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	4616      	mov	r6, r2
 800479a:	4699      	mov	r9, r3
 800479c:	688a      	ldr	r2, [r1, #8]
 800479e:	690b      	ldr	r3, [r1, #16]
 80047a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a4:	4293      	cmp	r3, r2
 80047a6:	bfb8      	it	lt
 80047a8:	4613      	movlt	r3, r2
 80047aa:	6033      	str	r3, [r6, #0]
 80047ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047b0:	4607      	mov	r7, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	b10a      	cbz	r2, 80047ba <_printf_common+0x26>
 80047b6:	3301      	adds	r3, #1
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	0699      	lsls	r1, r3, #26
 80047be:	bf42      	ittt	mi
 80047c0:	6833      	ldrmi	r3, [r6, #0]
 80047c2:	3302      	addmi	r3, #2
 80047c4:	6033      	strmi	r3, [r6, #0]
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	f015 0506 	ands.w	r5, r5, #6
 80047cc:	d106      	bne.n	80047dc <_printf_common+0x48>
 80047ce:	f104 0a19 	add.w	sl, r4, #25
 80047d2:	68e3      	ldr	r3, [r4, #12]
 80047d4:	6832      	ldr	r2, [r6, #0]
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	42ab      	cmp	r3, r5
 80047da:	dc26      	bgt.n	800482a <_printf_common+0x96>
 80047dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047e0:	1e13      	subs	r3, r2, #0
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	bf18      	it	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	0692      	lsls	r2, r2, #26
 80047ea:	d42b      	bmi.n	8004844 <_printf_common+0xb0>
 80047ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f0:	4649      	mov	r1, r9
 80047f2:	4638      	mov	r0, r7
 80047f4:	47c0      	blx	r8
 80047f6:	3001      	adds	r0, #1
 80047f8:	d01e      	beq.n	8004838 <_printf_common+0xa4>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	6922      	ldr	r2, [r4, #16]
 80047fe:	f003 0306 	and.w	r3, r3, #6
 8004802:	2b04      	cmp	r3, #4
 8004804:	bf02      	ittt	eq
 8004806:	68e5      	ldreq	r5, [r4, #12]
 8004808:	6833      	ldreq	r3, [r6, #0]
 800480a:	1aed      	subeq	r5, r5, r3
 800480c:	68a3      	ldr	r3, [r4, #8]
 800480e:	bf0c      	ite	eq
 8004810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004814:	2500      	movne	r5, #0
 8004816:	4293      	cmp	r3, r2
 8004818:	bfc4      	itt	gt
 800481a:	1a9b      	subgt	r3, r3, r2
 800481c:	18ed      	addgt	r5, r5, r3
 800481e:	2600      	movs	r6, #0
 8004820:	341a      	adds	r4, #26
 8004822:	42b5      	cmp	r5, r6
 8004824:	d11a      	bne.n	800485c <_printf_common+0xc8>
 8004826:	2000      	movs	r0, #0
 8004828:	e008      	b.n	800483c <_printf_common+0xa8>
 800482a:	2301      	movs	r3, #1
 800482c:	4652      	mov	r2, sl
 800482e:	4649      	mov	r1, r9
 8004830:	4638      	mov	r0, r7
 8004832:	47c0      	blx	r8
 8004834:	3001      	adds	r0, #1
 8004836:	d103      	bne.n	8004840 <_printf_common+0xac>
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	3501      	adds	r5, #1
 8004842:	e7c6      	b.n	80047d2 <_printf_common+0x3e>
 8004844:	18e1      	adds	r1, r4, r3
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	2030      	movs	r0, #48	; 0x30
 800484a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800484e:	4422      	add	r2, r4
 8004850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004858:	3302      	adds	r3, #2
 800485a:	e7c7      	b.n	80047ec <_printf_common+0x58>
 800485c:	2301      	movs	r3, #1
 800485e:	4622      	mov	r2, r4
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d0e6      	beq.n	8004838 <_printf_common+0xa4>
 800486a:	3601      	adds	r6, #1
 800486c:	e7d9      	b.n	8004822 <_printf_common+0x8e>
	...

08004870 <_printf_i>:
 8004870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	7e0f      	ldrb	r7, [r1, #24]
 8004876:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004878:	2f78      	cmp	r7, #120	; 0x78
 800487a:	4691      	mov	r9, r2
 800487c:	4680      	mov	r8, r0
 800487e:	460c      	mov	r4, r1
 8004880:	469a      	mov	sl, r3
 8004882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004886:	d807      	bhi.n	8004898 <_printf_i+0x28>
 8004888:	2f62      	cmp	r7, #98	; 0x62
 800488a:	d80a      	bhi.n	80048a2 <_printf_i+0x32>
 800488c:	2f00      	cmp	r7, #0
 800488e:	f000 80d4 	beq.w	8004a3a <_printf_i+0x1ca>
 8004892:	2f58      	cmp	r7, #88	; 0x58
 8004894:	f000 80c0 	beq.w	8004a18 <_printf_i+0x1a8>
 8004898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800489c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048a0:	e03a      	b.n	8004918 <_printf_i+0xa8>
 80048a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048a6:	2b15      	cmp	r3, #21
 80048a8:	d8f6      	bhi.n	8004898 <_printf_i+0x28>
 80048aa:	a101      	add	r1, pc, #4	; (adr r1, 80048b0 <_printf_i+0x40>)
 80048ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b0:	08004909 	.word	0x08004909
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	08004899 	.word	0x08004899
 80048bc:	08004899 	.word	0x08004899
 80048c0:	08004899 	.word	0x08004899
 80048c4:	08004899 	.word	0x08004899
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	08004899 	.word	0x08004899
 80048d0:	08004899 	.word	0x08004899
 80048d4:	08004899 	.word	0x08004899
 80048d8:	08004899 	.word	0x08004899
 80048dc:	08004a21 	.word	0x08004a21
 80048e0:	08004949 	.word	0x08004949
 80048e4:	080049db 	.word	0x080049db
 80048e8:	08004899 	.word	0x08004899
 80048ec:	08004899 	.word	0x08004899
 80048f0:	08004a43 	.word	0x08004a43
 80048f4:	08004899 	.word	0x08004899
 80048f8:	08004949 	.word	0x08004949
 80048fc:	08004899 	.word	0x08004899
 8004900:	08004899 	.word	0x08004899
 8004904:	080049e3 	.word	0x080049e3
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	1d1a      	adds	r2, r3, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	602a      	str	r2, [r5, #0]
 8004910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004918:	2301      	movs	r3, #1
 800491a:	e09f      	b.n	8004a5c <_printf_i+0x1ec>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	682b      	ldr	r3, [r5, #0]
 8004920:	0607      	lsls	r7, r0, #24
 8004922:	f103 0104 	add.w	r1, r3, #4
 8004926:	6029      	str	r1, [r5, #0]
 8004928:	d501      	bpl.n	800492e <_printf_i+0xbe>
 800492a:	681e      	ldr	r6, [r3, #0]
 800492c:	e003      	b.n	8004936 <_printf_i+0xc6>
 800492e:	0646      	lsls	r6, r0, #25
 8004930:	d5fb      	bpl.n	800492a <_printf_i+0xba>
 8004932:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004936:	2e00      	cmp	r6, #0
 8004938:	da03      	bge.n	8004942 <_printf_i+0xd2>
 800493a:	232d      	movs	r3, #45	; 0x2d
 800493c:	4276      	negs	r6, r6
 800493e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004942:	485a      	ldr	r0, [pc, #360]	; (8004aac <_printf_i+0x23c>)
 8004944:	230a      	movs	r3, #10
 8004946:	e012      	b.n	800496e <_printf_i+0xfe>
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	6820      	ldr	r0, [r4, #0]
 800494c:	1d19      	adds	r1, r3, #4
 800494e:	6029      	str	r1, [r5, #0]
 8004950:	0605      	lsls	r5, r0, #24
 8004952:	d501      	bpl.n	8004958 <_printf_i+0xe8>
 8004954:	681e      	ldr	r6, [r3, #0]
 8004956:	e002      	b.n	800495e <_printf_i+0xee>
 8004958:	0641      	lsls	r1, r0, #25
 800495a:	d5fb      	bpl.n	8004954 <_printf_i+0xe4>
 800495c:	881e      	ldrh	r6, [r3, #0]
 800495e:	4853      	ldr	r0, [pc, #332]	; (8004aac <_printf_i+0x23c>)
 8004960:	2f6f      	cmp	r7, #111	; 0x6f
 8004962:	bf0c      	ite	eq
 8004964:	2308      	moveq	r3, #8
 8004966:	230a      	movne	r3, #10
 8004968:	2100      	movs	r1, #0
 800496a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800496e:	6865      	ldr	r5, [r4, #4]
 8004970:	60a5      	str	r5, [r4, #8]
 8004972:	2d00      	cmp	r5, #0
 8004974:	bfa2      	ittt	ge
 8004976:	6821      	ldrge	r1, [r4, #0]
 8004978:	f021 0104 	bicge.w	r1, r1, #4
 800497c:	6021      	strge	r1, [r4, #0]
 800497e:	b90e      	cbnz	r6, 8004984 <_printf_i+0x114>
 8004980:	2d00      	cmp	r5, #0
 8004982:	d04b      	beq.n	8004a1c <_printf_i+0x1ac>
 8004984:	4615      	mov	r5, r2
 8004986:	fbb6 f1f3 	udiv	r1, r6, r3
 800498a:	fb03 6711 	mls	r7, r3, r1, r6
 800498e:	5dc7      	ldrb	r7, [r0, r7]
 8004990:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004994:	4637      	mov	r7, r6
 8004996:	42bb      	cmp	r3, r7
 8004998:	460e      	mov	r6, r1
 800499a:	d9f4      	bls.n	8004986 <_printf_i+0x116>
 800499c:	2b08      	cmp	r3, #8
 800499e:	d10b      	bne.n	80049b8 <_printf_i+0x148>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	07de      	lsls	r6, r3, #31
 80049a4:	d508      	bpl.n	80049b8 <_printf_i+0x148>
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	6861      	ldr	r1, [r4, #4]
 80049aa:	4299      	cmp	r1, r3
 80049ac:	bfde      	ittt	le
 80049ae:	2330      	movle	r3, #48	; 0x30
 80049b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049b8:	1b52      	subs	r2, r2, r5
 80049ba:	6122      	str	r2, [r4, #16]
 80049bc:	f8cd a000 	str.w	sl, [sp]
 80049c0:	464b      	mov	r3, r9
 80049c2:	aa03      	add	r2, sp, #12
 80049c4:	4621      	mov	r1, r4
 80049c6:	4640      	mov	r0, r8
 80049c8:	f7ff fee4 	bl	8004794 <_printf_common>
 80049cc:	3001      	adds	r0, #1
 80049ce:	d14a      	bne.n	8004a66 <_printf_i+0x1f6>
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295
 80049d4:	b004      	add	sp, #16
 80049d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	f043 0320 	orr.w	r3, r3, #32
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	4833      	ldr	r0, [pc, #204]	; (8004ab0 <_printf_i+0x240>)
 80049e4:	2778      	movs	r7, #120	; 0x78
 80049e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	6829      	ldr	r1, [r5, #0]
 80049ee:	061f      	lsls	r7, r3, #24
 80049f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80049f4:	d402      	bmi.n	80049fc <_printf_i+0x18c>
 80049f6:	065f      	lsls	r7, r3, #25
 80049f8:	bf48      	it	mi
 80049fa:	b2b6      	uxthmi	r6, r6
 80049fc:	07df      	lsls	r7, r3, #31
 80049fe:	bf48      	it	mi
 8004a00:	f043 0320 	orrmi.w	r3, r3, #32
 8004a04:	6029      	str	r1, [r5, #0]
 8004a06:	bf48      	it	mi
 8004a08:	6023      	strmi	r3, [r4, #0]
 8004a0a:	b91e      	cbnz	r6, 8004a14 <_printf_i+0x1a4>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f023 0320 	bic.w	r3, r3, #32
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	2310      	movs	r3, #16
 8004a16:	e7a7      	b.n	8004968 <_printf_i+0xf8>
 8004a18:	4824      	ldr	r0, [pc, #144]	; (8004aac <_printf_i+0x23c>)
 8004a1a:	e7e4      	b.n	80049e6 <_printf_i+0x176>
 8004a1c:	4615      	mov	r5, r2
 8004a1e:	e7bd      	b.n	800499c <_printf_i+0x12c>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	6826      	ldr	r6, [r4, #0]
 8004a24:	6961      	ldr	r1, [r4, #20]
 8004a26:	1d18      	adds	r0, r3, #4
 8004a28:	6028      	str	r0, [r5, #0]
 8004a2a:	0635      	lsls	r5, r6, #24
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	d501      	bpl.n	8004a34 <_printf_i+0x1c4>
 8004a30:	6019      	str	r1, [r3, #0]
 8004a32:	e002      	b.n	8004a3a <_printf_i+0x1ca>
 8004a34:	0670      	lsls	r0, r6, #25
 8004a36:	d5fb      	bpl.n	8004a30 <_printf_i+0x1c0>
 8004a38:	8019      	strh	r1, [r3, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	4615      	mov	r5, r2
 8004a40:	e7bc      	b.n	80049bc <_printf_i+0x14c>
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	602a      	str	r2, [r5, #0]
 8004a48:	681d      	ldr	r5, [r3, #0]
 8004a4a:	6862      	ldr	r2, [r4, #4]
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f7fb fbc6 	bl	80001e0 <memchr>
 8004a54:	b108      	cbz	r0, 8004a5a <_printf_i+0x1ea>
 8004a56:	1b40      	subs	r0, r0, r5
 8004a58:	6060      	str	r0, [r4, #4]
 8004a5a:	6863      	ldr	r3, [r4, #4]
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a64:	e7aa      	b.n	80049bc <_printf_i+0x14c>
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	47d0      	blx	sl
 8004a70:	3001      	adds	r0, #1
 8004a72:	d0ad      	beq.n	80049d0 <_printf_i+0x160>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	079b      	lsls	r3, r3, #30
 8004a78:	d413      	bmi.n	8004aa2 <_printf_i+0x232>
 8004a7a:	68e0      	ldr	r0, [r4, #12]
 8004a7c:	9b03      	ldr	r3, [sp, #12]
 8004a7e:	4298      	cmp	r0, r3
 8004a80:	bfb8      	it	lt
 8004a82:	4618      	movlt	r0, r3
 8004a84:	e7a6      	b.n	80049d4 <_printf_i+0x164>
 8004a86:	2301      	movs	r3, #1
 8004a88:	4632      	mov	r2, r6
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	47d0      	blx	sl
 8004a90:	3001      	adds	r0, #1
 8004a92:	d09d      	beq.n	80049d0 <_printf_i+0x160>
 8004a94:	3501      	adds	r5, #1
 8004a96:	68e3      	ldr	r3, [r4, #12]
 8004a98:	9903      	ldr	r1, [sp, #12]
 8004a9a:	1a5b      	subs	r3, r3, r1
 8004a9c:	42ab      	cmp	r3, r5
 8004a9e:	dcf2      	bgt.n	8004a86 <_printf_i+0x216>
 8004aa0:	e7eb      	b.n	8004a7a <_printf_i+0x20a>
 8004aa2:	2500      	movs	r5, #0
 8004aa4:	f104 0619 	add.w	r6, r4, #25
 8004aa8:	e7f5      	b.n	8004a96 <_printf_i+0x226>
 8004aaa:	bf00      	nop
 8004aac:	08004d09 	.word	0x08004d09
 8004ab0:	08004d1a 	.word	0x08004d1a

08004ab4 <memmove>:
 8004ab4:	4288      	cmp	r0, r1
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	eb01 0402 	add.w	r4, r1, r2
 8004abc:	d902      	bls.n	8004ac4 <memmove+0x10>
 8004abe:	4284      	cmp	r4, r0
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	d807      	bhi.n	8004ad4 <memmove+0x20>
 8004ac4:	1e43      	subs	r3, r0, #1
 8004ac6:	42a1      	cmp	r1, r4
 8004ac8:	d008      	beq.n	8004adc <memmove+0x28>
 8004aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ad2:	e7f8      	b.n	8004ac6 <memmove+0x12>
 8004ad4:	4402      	add	r2, r0
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	428a      	cmp	r2, r1
 8004ada:	d100      	bne.n	8004ade <memmove+0x2a>
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ae6:	e7f7      	b.n	8004ad8 <memmove+0x24>

08004ae8 <_sbrk_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	4d06      	ldr	r5, [pc, #24]	; (8004b04 <_sbrk_r+0x1c>)
 8004aec:	2300      	movs	r3, #0
 8004aee:	4604      	mov	r4, r0
 8004af0:	4608      	mov	r0, r1
 8004af2:	602b      	str	r3, [r5, #0]
 8004af4:	f7fc f896 	bl	8000c24 <_sbrk>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_sbrk_r+0x1a>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_sbrk_r+0x1a>
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	200002f8 	.word	0x200002f8

08004b08 <memcpy>:
 8004b08:	440a      	add	r2, r1
 8004b0a:	4291      	cmp	r1, r2
 8004b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b10:	d100      	bne.n	8004b14 <memcpy+0xc>
 8004b12:	4770      	bx	lr
 8004b14:	b510      	push	{r4, lr}
 8004b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b1e:	4291      	cmp	r1, r2
 8004b20:	d1f9      	bne.n	8004b16 <memcpy+0xe>
 8004b22:	bd10      	pop	{r4, pc}

08004b24 <_realloc_r>:
 8004b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b28:	4680      	mov	r8, r0
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	460e      	mov	r6, r1
 8004b2e:	b921      	cbnz	r1, 8004b3a <_realloc_r+0x16>
 8004b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b34:	4611      	mov	r1, r2
 8004b36:	f7ff bc49 	b.w	80043cc <_malloc_r>
 8004b3a:	b92a      	cbnz	r2, 8004b48 <_realloc_r+0x24>
 8004b3c:	f7ff fbda 	bl	80042f4 <_free_r>
 8004b40:	4625      	mov	r5, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b48:	f000 f81b 	bl	8004b82 <_malloc_usable_size_r>
 8004b4c:	4284      	cmp	r4, r0
 8004b4e:	4607      	mov	r7, r0
 8004b50:	d802      	bhi.n	8004b58 <_realloc_r+0x34>
 8004b52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b56:	d812      	bhi.n	8004b7e <_realloc_r+0x5a>
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	f7ff fc36 	bl	80043cc <_malloc_r>
 8004b60:	4605      	mov	r5, r0
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d0ed      	beq.n	8004b42 <_realloc_r+0x1e>
 8004b66:	42bc      	cmp	r4, r7
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	bf28      	it	cs
 8004b6e:	463a      	movcs	r2, r7
 8004b70:	f7ff ffca 	bl	8004b08 <memcpy>
 8004b74:	4631      	mov	r1, r6
 8004b76:	4640      	mov	r0, r8
 8004b78:	f7ff fbbc 	bl	80042f4 <_free_r>
 8004b7c:	e7e1      	b.n	8004b42 <_realloc_r+0x1e>
 8004b7e:	4635      	mov	r5, r6
 8004b80:	e7df      	b.n	8004b42 <_realloc_r+0x1e>

08004b82 <_malloc_usable_size_r>:
 8004b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b86:	1f18      	subs	r0, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bfbc      	itt	lt
 8004b8c:	580b      	ldrlt	r3, [r1, r0]
 8004b8e:	18c0      	addlt	r0, r0, r3
 8004b90:	4770      	bx	lr
	...

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr
